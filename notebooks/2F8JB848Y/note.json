{
  "paragraphs": [
    {
      "text": "%md\n\n# Music Recommendator\n\n",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:22:39.594",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eMusic Recommendator\u003c/h1\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1590404160920_724976566",
      "id": "20200525-105600_876779769",
      "dateCreated": "2020-05-25 10:56:00.920",
      "dateStarted": "2020-06-17 17:22:39.845",
      "dateFinished": "2020-06-17 17:22:41.900",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Preparing the Data\n\nLet\u0027s start by downloading the data :\n",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:22:41.944",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003ePreparing the Data\u003c/h2\u003e\n\u003cp\u003eLet\u0026rsquo;s start by downloading the data :\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1590404204036_-155805845",
      "id": "20200525-105644_555166138",
      "dateCreated": "2020-05-25 10:56:44.037",
      "dateStarted": "2020-06-17 17:22:42.336",
      "dateFinished": "2020-06-17 17:22:42.357",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sh\ncd /data\nif [[ ! -d profiledata_06-May-2005 ]]\nthen\n    if [[ ! -f profiledata_06-May-2005.tar.xz ]]\n    then \n        echo \"Downloading profiledata_06-May-2005.tar.xz\"\n        curl --silent https://drive.switch.ch/index.php/s/gK6l44wTWixlaeC/download -o profiledata_06-May-2005.tar.xz\n    fi\n    echo \"Extracting to profiledata_06-May-2005\"\n    tar xfv profiledata_06-May-2005.tar.xz\nfi\nls -lhF profiledata_06-May-2005",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:22:42.431",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "sh",
          "editOnDblClick": false,
          "completionSupport": false,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/sh"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "total 464M\n-rw-r--r-- 1 1000 1000 2.8M May  6  2005 artist_alias.txt\n-rw-r--r-- 1 1000 1000  54M May  6  2005 artist_data.txt\n-rw-r--r-- 1 1000 1000 1.3K May 10  2005 README.txt\n-rw-r--r-- 1 1000 1000 407M May  5  2005 user_artist_data.txt\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1590395388698_1190528192",
      "id": "20200525-082948_1820188021",
      "dateCreated": "2020-05-25 08:29:48.698",
      "dateStarted": "2020-06-17 17:22:42.676",
      "dateFinished": "2020-06-17 17:22:44.790",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nNext, read the user artist data and transform it in a Dataframe with two columns \"user\" and \"artist\" :",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:22:44.877",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eNext, read the user artist data and transform it in a Dataframe with two columns \u0026ldquo;user\u0026rdquo; and \u0026ldquo;artist\u0026rdquo; :\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1590404376466_270920040",
      "id": "20200525-105936_1453333316",
      "dateCreated": "2020-05-25 10:59:36.466",
      "dateStarted": "2020-06-17 17:22:45.072",
      "dateFinished": "2020-06-17 17:22:45.096",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nval rawUserArtistData \u003d spark.read.textFile(\"/data/profiledata_06-May-2005/user_artist_data.txt\")\nrawUserArtistData.take(5).foreach(println)\n\nval userArtistDF \u003d rawUserArtistData.map { line \u003d\u003e \n    val Array(user, artist, _*) \u003d line.split(\u0027 \u0027)\n    (user.toInt, artist.toInt)\n}.toDF(\"user\", \"artist\")\nuserArtistDF.printSchema\nuserArtistDF.agg(min(\"user\"), max(\"user\"), min(\"artist\"), max(\"artist\")).show()",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:22:45.172",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "1000002 1 55\n1000002 1000006 33\n1000002 1000007 8\n1000002 1000009 144\n1000002 1000010 314\nroot\n |-- user: integer (nullable \u003d false)\n |-- artist: integer (nullable \u003d false)\n\n+---------+---------+-----------+-----------+\n|min(user)|max(user)|min(artist)|max(artist)|\n+---------+---------+-----------+-----------+\n|       90|  2443548|          1|   10794401|\n+---------+---------+-----------+-----------+\n\nrawUserArtistData: org.apache.spark.sql.Dataset[String] \u003d [value: string]\nuserArtistDF: org.apache.spark.sql.DataFrame \u003d [user: int, artist: int]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1590403079984_-213506736",
      "id": "20200525-103759_1452771728",
      "dateCreated": "2020-05-25 10:37:59.984",
      "dateStarted": "2020-06-17 17:22:45.341",
      "dateFinished": "2020-06-17 17:23:13.479",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nNext, read the raw artist data and transform it in a Dataframe with two columns \"id\" and \"name\" :",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:23:13.566",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eNext, read the raw artist data and transform it in a Dataframe with two columns \u0026ldquo;id\u0026rdquo; and \u0026ldquo;name\u0026rdquo; :\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1590404636907_1121945544",
      "id": "20200525-110356_1897971030",
      "dateCreated": "2020-05-25 11:03:56.907",
      "dateStarted": "2020-06-17 17:23:13.692",
      "dateFinished": "2020-06-17 17:23:13.700",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nval rawArtistData \u003d spark.read.textFile(\"/data/profiledata_06-May-2005/artist_data.txt\")\nval artistByID \u003d rawArtistData.flatMap { line \u003d\u003e\n    val (id, name) \u003d line.span(_ !\u003d \u0027\\t\u0027)\n    if (name.isEmpty) None\n    else {\n        try Some((id.toInt, name.trim))\n        catch {\n            case _: NumberFormatException \u003d\u003e None\n        }\n    }\n}.toDF(\"id\", \"name\")",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:23:13.792",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "rawArtistData: org.apache.spark.sql.Dataset[String] \u003d [value: string]\nartistByID: org.apache.spark.sql.DataFrame \u003d [id: int, name: string]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1590404632088_1692483147",
      "id": "20200525-110352_2143376873",
      "dateCreated": "2020-05-25 11:03:52.088",
      "dateStarted": "2020-06-17 17:23:13.917",
      "dateFinished": "2020-06-17 17:23:14.613",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nNext, read the alias artist data and transform it in a Map with artist id for the key and alias for value :",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:23:14.617",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eNext, read the alias artist data and transform it in a Map with artist id for the key and alias for value :\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1590404719724_1188961969",
      "id": "20200525-110519_1836651915",
      "dateCreated": "2020-05-25 11:05:19.724",
      "dateStarted": "2020-06-17 17:23:14.878",
      "dateFinished": "2020-06-17 17:23:14.897",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nval rawArtistAlias \u003d spark.read.textFile(\"/data/profiledata_06-May-2005/artist_alias.txt\")\nval artistAlias \u003d rawArtistAlias.flatMap { line \u003d\u003e\n    val Array(artist, alias) \u003d line.split(\u0027\\t\u0027)\n    if (artist.isEmpty) None\n    else Some((artist.toInt, alias.toInt))\n}.collect().toMap\n\nartistByID.filter($\"id\" isin (1208690, 1003926)).show()",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:23:14.977",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 92.6833,
              "optionOpen": false
            }
          }
        },
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+-------+----------------+\n|     id|            name|\n+-------+----------------+\n|1208690|Collective Souls|\n|1003926| Collective Soul|\n+-------+----------------+\n\nrawArtistAlias: org.apache.spark.sql.Dataset[String] \u003d [value: string]\nartistAlias: scala.collection.immutable.Map[Int,Int] \u003d Map(1208690 -\u003e 1003926, 2012757 -\u003e 4569, 6949139 -\u003e 1085752, 1109727 -\u003e 1239120, 6772751 -\u003e 1244705, 2070533 -\u003e 1021544, 1157679 -\u003e 2194, 9969617 -\u003e 5630, 2034496 -\u003e 1116214, 6764342 -\u003e 40, 1272489 -\u003e 1278238, 2108744 -\u003e 1009267, 10349857 -\u003e 1000052, 2145319 -\u003e 1020463, 2126338 -\u003e 2717, 10165456 -\u003e 1001169, 6779368 -\u003e 1239506, 10278137 -\u003e 1001523, 9939075 -\u003e 1329390, 2037201 -\u003e 1274155, 1248585 -\u003e 2885, 1106945 -\u003e 1399, 6811322 -\u003e 1019016, 9978396 -\u003e 1784, 6676961 -\u003e 1086433, 2117821 -\u003e 2611, 6863616 -\u003e 1277013, 6895480 -\u003e 1000993, 6831632 -\u003e 1246136, 1001719 -\u003e 1009727, 10135633 -\u003e 4250, 7029291 -\u003e 1034635, 6967939 -\u003e 1002734, 6864694 -\u003e 1017311, 1237279 -\u003e 1029..."
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1590403815626_-1753499650",
      "id": "20200525-105015_1244952508",
      "dateCreated": "2020-05-25 10:50:15.626",
      "dateStarted": "2020-06-17 17:23:15.095",
      "dateFinished": "2020-06-17 17:23:17.835",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\n\nimport org.apache.spark.sql._\nimport org.apache.spark.broadcast._\n\n// Cleaning data in bonus\n\n/**\n * Convert count musics to approximatively years of listening\n */\ndef countToYear(count: Int): Boolean \u003d {\n    val avgSongMinutesLength \u003d 4.0\n    avgSongMinutesLength * count.toDouble / 60.0 / 24.0 / 365.0 \u003c 2\n}\n \ndef buildCounts(rawUserArtistData: Dataset[String], bArtistAlias: Broadcast[Map[Int,Int]]): DataFrame \u003d {\n    val unknownId \u003d artistByID.filter($\"name\" \u003d\u003d\u003d \"[unknown]\").select($\"id\").head.getInt(0)\n    val userArtistCleanedDF \u003d userArtistDF.filter($\"artist\" !\u003d\u003d unknownId)\n    \n    rawUserArtistData.map { line \u003d\u003e\n        val Array(userID, artistID, count) \u003d line.split(\u0027 \u0027).map(_.toInt)\n        val finalArtistID \u003d bArtistAlias.value.getOrElse(artistID, artistID)\n        (userID, finalArtistID, count)\n    }.toDF(\"user\", \"artist\", \"count\").filter($\"artist\" !\u003d\u003d unknownId)\n}\nval bArtistAlias \u003d spark.sparkContext.broadcast(artistAlias)\nval trainData \u003d buildCounts(rawUserArtistData, bArtistAlias).filter($\"count\" \u003c 400000)\ntrainData.orderBy(desc(\"count\")).show\ntrainData.cache()",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:23:17.897",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "warning: there were two deprecation warnings; re-run with -deprecation for details\n+-------+-------+------+\n|   user| artist| count|\n+-------+-------+------+\n|1059637|1026440|155895|\n|2069889|1002095|101076|\n|2020513|1007801| 88908|\n|1073421|1004440| 67548|\n|2023977|1007903| 62815|\n|2023977|   2823| 51039|\n|2014936|     82| 36083|\n|2069337|1006134| 34800|\n|2013784|1004059| 32768|\n|2069337|1007027| 31321|\n|1073435|1105069| 30043|\n|2023977|1000156| 29983|\n|1052225|1256375| 29933|\n|2017397|1000427| 26394|\n|1045479|1000113| 26135|\n|2062243|6901343| 26107|\n|1039100|1275996| 25858|\n|1053554|    478| 25303|\n|2017397|1004296| 24876|\n|2216281|   5705| 24067|\n+-------+-------+------+\nonly showing top 20 rows\n\nimport org.apache.spark.sql._\nimport org.apache.spark.broadcast._\ncountToYear: (count: Int)Boolean\nbuildCounts: (rawUserArtistData: org.apache.spark.sql.Dataset[String], bArtistAlias: org.apache.spark.broadcast.Broadcast[Map[Int,Int]])org.apache.spark.sql.DataFrame\nbArtistAlias: org.apache.spark.broadcast.Broadcast[scala.collection.immutable.Map[Int,Int]] \u003d Broadcast(9)\ntrainData: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] \u003d [user: int, artist: int ... 1 more field]\nres3: trainData.type \u003d [user: int, artist: int ... 1 more field]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1590404829942_-1453554254",
      "id": "20200525-110709_1785781047",
      "dateCreated": "2020-05-25 11:07:09.942",
      "dateStarted": "2020-06-17 17:23:17.999",
      "dateFinished": "2020-06-17 17:23:43.140",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n# Statistics",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:23:43.219",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eStatistics\u003c/h1\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1590414919792_1966495056",
      "id": "20200525-135519_1912337093",
      "dateCreated": "2020-05-25 13:55:19.792",
      "dateStarted": "2020-06-17 17:23:43.318",
      "dateFinished": "2020-06-17 17:23:43.322",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Describe statistics",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:23:43.418",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eDescribe statistics\u003c/h2\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1590590237186_-623096228",
      "id": "20200527-143717_23609195",
      "dateCreated": "2020-05-27 14:37:17.186",
      "dateStarted": "2020-06-17 17:23:43.512",
      "dateFinished": "2020-06-17 17:23:43.521",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nval userSummary \u003d trainData.describe(\"user\")\nuserSummary.show\n\nval artistSummary \u003d trainData.describe(\"artist\")\nartistSummary.show\n\nval countSummary \u003d trainData.describe(\"count\")\ncountSummary.show",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:23:43.612",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+-------+------------------+\n|summary|              user|\n+-------+------------------+\n|  count|          24259165|\n|   mean|1947645.8761629264|\n| stddev| 495961.5513546217|\n|    min|                90|\n|    max|           2443548|\n+-------+------------------+\n\n+-------+------------------+\n|summary|            artist|\n+-------+------------------+\n|  count|          24259165|\n|   mean|1701022.6841495163|\n| stddev|  2516504.31072957|\n|    min|                 1|\n|    max|          10794401|\n+-------+------------------+\n\n+-------+------------------+\n|summary|             count|\n+-------+------------------+\n|  count|          24259165|\n|   mean|15.265846577984032|\n| stddev| 89.56463917606709|\n|    min|                 1|\n|    max|            155895|\n+-------+------------------+\n\nuserSummary: org.apache.spark.sql.DataFrame \u003d [summary: string, user: string]\nartistSummary: org.apache.spark.sql.DataFrame \u003d [summary: string, artist: string]\ncountSummary: org.apache.spark.sql.DataFrame \u003d [summary: string, count: string]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1590590249472_873829545",
      "id": "20200527-143729_1355604663",
      "dateCreated": "2020-05-27 14:37:29.472",
      "dateStarted": "2020-06-17 17:23:43.731",
      "dateFinished": "2020-06-17 17:24:21.740",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Data fusion\nCompute a Dataframe with user id, artist id, artist name and count for later uses.",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:24:21.758",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eData fusion\u003c/h2\u003e\n\u003cp\u003eCompute a Dataframe with user id, artist id, artist name and count for later uses.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1590594064315_1755221963",
      "id": "20200527-154104_1970292027",
      "dateCreated": "2020-05-27 15:41:04.315",
      "dateStarted": "2020-06-17 17:24:21.897",
      "dateFinished": "2020-06-17 17:24:21.905",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nval userArtistNamesCountDF \u003d \n    trainData\n    .join(artistByID, artistByID(\"id\") \u003d\u003d\u003d trainData(\"artist\"))\n    .select(\"user\", \"artist\", \"name\", \"count\")\nuserArtistNamesCountDF.cache\nuserArtistNamesCountDF.show",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:24:21.996",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+-------+------+----------+-----+\n|   user|artist|      name|count|\n+-------+------+----------+-----+\n|1000019|   463|The Smiths|    1|\n|1000020|   463|The Smiths|  199|\n|1000022|   463|The Smiths|   20|\n|1000033|   463|The Smiths|  466|\n|1000056|   463|The Smiths|   10|\n|1000067|   463|The Smiths|   18|\n|1000070|   463|The Smiths|  399|\n|1000073|   463|The Smiths|    3|\n|1000077|   463|The Smiths|   15|\n|1000082|   463|The Smiths|   16|\n|1000090|   463|The Smiths|    1|\n|1000096|   463|The Smiths|    2|\n|1000099|   463|The Smiths|   10|\n|1000106|   463|The Smiths|    1|\n|1000114|   463|The Smiths|    3|\n|1000117|   463|The Smiths|    1|\n|1000119|   463|The Smiths|   14|\n|1000124|   463|The Smiths|    2|\n|1000125|   463|The Smiths|    8|\n|1000127|   463|The Smiths|    2|\n+-------+------+----------+-----+\nonly showing top 20 rows\n\nuserArtistNamesCountDF: org.apache.spark.sql.DataFrame \u003d [user: int, artist: int ... 2 more fields]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1590590062800_2109207725",
      "id": "20200527-143422_594483041",
      "dateCreated": "2020-05-27 14:34:22.800",
      "dateStarted": "2020-06-17 17:24:22.119",
      "dateFinished": "2020-06-17 17:24:31.847",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Around users",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:24:31.926",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eAround users\u003c/h2\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1591187646397_321240090",
      "id": "20200603-123406_1776470630",
      "dateCreated": "2020-06-03 12:34:06.397",
      "dateStarted": "2020-06-17 17:24:32.005",
      "dateFinished": "2020-06-17 17:24:32.013",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nGet users number",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:24:32.105",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eGet users number\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1590747813508_-1257535935",
      "id": "20200529-102333_1988446988",
      "dateCreated": "2020-05-29 10:23:33.508",
      "dateStarted": "2020-06-17 17:24:32.180",
      "dateFinished": "2020-06-17 17:24:32.185",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nval distinctUsersNumber \u003d userArtistNamesCountDF.select(\"user\").distinct.count\nprintln(distinctUsersNumber)",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:24:32.280",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "148077\ndistinctUsersNumber: Long \u003d 148077\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1590747828635_-1911174006",
      "id": "20200529-102348_186273132",
      "dateCreated": "2020-05-29 10:23:48.636",
      "dateStarted": "2020-06-17 17:24:32.369",
      "dateFinished": "2020-06-17 17:25:18.628",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nLet\u0027s see the listen\u0027s total per user and sort it by the higher.",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:25:18.709",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eLet\u0026rsquo;s see the listen\u0026rsquo;s total per user and sort it by the higher.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1591188912275_1259738258",
      "id": "20200603-125512_896180722",
      "dateCreated": "2020-06-03 12:55:12.275",
      "dateStarted": "2020-06-17 17:25:18.817",
      "dateFinished": "2020-06-17 17:25:18.827",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nval userListenArtists \u003d userArtistNamesCountDF.groupBy(\"user\").sum(\"count\").select($\"user\", $\"sum(count)\" as \"total\")\nuserListenArtists.cache\n\nval mostUserListenArtists \u003d userListenArtists.sort(desc(\"total\"))\nmostUserListenArtists.show\n\nz.show()",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:25:18.914",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "1": {
            "graph": {
              "mode": "multiBarChart",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "user": "string",
                      "total": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                },
                "multiBarChart": {
                  "rotate": {
                    "degree": "-45"
                  },
                  "xLabelStatus": "default",
                  "stacked": true
                }
              },
              "commonSetting": {},
              "keys": [
                {
                  "name": "user",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "values": [
                {
                  "name": "total",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ]
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "warning: there was one deprecation warning; re-run with -deprecation for details\n+-------+------+\n|   user| total|\n+-------+------+\n|2069337|393515|\n|2023977|285978|\n|1059637|241350|\n|1046559|183972|\n|1052461|175822|\n|1070932|168977|\n|1031009|167028|\n|2020513|165642|\n|2062243|151482|\n|2069889|143092|\n|1001440|136266|\n|2014936|135235|\n|2017397|134032|\n|1024631|122303|\n|1007308|111274|\n|2064012|108640|\n|2023742|102030|\n|1058890| 98472|\n|1021940| 97318|\n|1059245| 96037|\n+-------+------+\nonly showing top 20 rows\n\nZeppelinContext doesn\u0027t support to show type: scala.runtime.BoxedUnit\n()userListenArtists: org.apache.spark.sql.DataFrame \u003d [user: int, total: bigint]\nmostUserListenArtists: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] \u003d [user: int, total: bigint]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1591187663060_-889404448",
      "id": "20200603-123423_567139667",
      "dateCreated": "2020-06-03 12:34:23.060",
      "dateStarted": "2020-06-17 17:25:19.028",
      "dateFinished": "2020-06-17 17:25:35.620",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nThe first user made almost 400\u0027000 plays !\nWe can see that a user has listend \"My Chemical Romance\" almost 156\u0027000 times.",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:25:35.643",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eThe first user made almost 400\u0026rsquo;000 plays !\u003cbr/\u003eWe can see that a user has listend \u0026ldquo;My Chemical Romance\u0026rdquo; almost 156\u0026rsquo;000 times.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1591188952139_313158455",
      "id": "20200603-125552_1479982108",
      "dateCreated": "2020-06-03 12:55:52.139",
      "dateStarted": "2020-06-17 17:25:35.762",
      "dateFinished": "2020-06-17 17:25:35.768",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nval userDifferentArtists \u003d userArtistNamesCountDF.groupBy(\"user\", \"name\").sum(\"count\").select($\"user\", $\"name\", $\"sum(count)\" as \"total\")\nuserDifferentArtists.cache\nuserDifferentArtists.sort(desc(\"total\")).show",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:25:35.861",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+-------+--------------------+------+\n|   user|                name| total|\n+-------+--------------------+------+\n|1059637| My Chemical Romance|155895|\n|2069889| Something Corporate|101076|\n|2020513|      Mates of State| 89592|\n|1073421|    Guided by Voices| 67548|\n|2023977|            Maroon 5| 62815|\n|2023977|   Alanis Morissette| 51039|\n|2014936|          Pink Floyd| 36083|\n|2069337|        Sage Francis| 34800|\n|2013784|     Cannibal Corpse| 32768|\n|2069337|          Jawbreaker| 31321|\n|1073435|ASIAN KUNG-FU GEN...| 30043|\n|2023977|          Guano Apes| 29983|\n|1052225|               浜崎あゆみ| 29933|\n|2017397|     New Found Glory| 26394|\n|1045479|         The Beatles| 26135|\n|2062243|           Music 205| 26107|\n|1039100|              R.E.M.| 25858|\n|1053554|    Boards of Canada| 25303|\n|2017397|              Thrice| 24876|\n|2216281|           Rammstein| 24067|\n+-------+--------------------+------+\nonly showing top 20 rows\n\nuserDifferentArtists: org.apache.spark.sql.DataFrame \u003d [user: int, name: string ... 1 more field]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1591189886953_-1586584012",
      "id": "20200603-131126_294603452",
      "dateCreated": "2020-06-03 13:11:26.953",
      "dateStarted": "2020-06-17 17:25:35.928",
      "dateFinished": "2020-06-17 17:26:36.156",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nNow let\u0027s see how many different artists the users listen in average.",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:26:36.175",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eNow let\u0026rsquo;s see how many different artists the users listen in average.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1591195070440_23860404",
      "id": "20200603-143750_192146411",
      "dateCreated": "2020-06-03 14:37:50.440",
      "dateStarted": "2020-06-17 17:26:36.298",
      "dateFinished": "2020-06-17 17:26:36.302",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nval artistsPerUser \u003d userDifferentArtists.groupBy(\"user\").count.sort(desc(\"count\"))\nartistsPerUser.cache\n\nprintln(artistsPerUser.count)\nartistsPerUser.describe(\"count\").show",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:26:36.397",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "148077\n+-------+------------------+\n|summary|             count|\n+-------+------------------+\n|  count|            148077|\n|   mean|162.66439757693632|\n| stddev| 215.3813187758636|\n|    min|                 1|\n|    max|              6734|\n+-------+------------------+\n\nartistsPerUser: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] \u003d [user: int, count: bigint]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1591192747866_1333042132",
      "id": "20200603-135907_210380760",
      "dateCreated": "2020-06-03 13:59:07.866",
      "dateStarted": "2020-06-17 17:26:36.459",
      "dateFinished": "2020-06-17 17:27:04.290",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nUsers listen to 162 artists in average.\n",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:27:04.384",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eUsers listen to 162 artists in average.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1591195139834_1725271268",
      "id": "20200603-143859_2131322575",
      "dateCreated": "2020-06-03 14:38:59.834",
      "dateStarted": "2020-06-17 17:27:04.476",
      "dateFinished": "2020-06-17 17:27:04.480",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Around artists",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:27:04.576",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eAround artists\u003c/h2\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1590589883731_1756040608",
      "id": "20200527-143123_948169887",
      "dateCreated": "2020-05-27 14:31:23.731",
      "dateStarted": "2020-06-17 17:27:04.666",
      "dateFinished": "2020-06-17 17:27:04.673",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nGet artists number",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:27:04.766",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eGet artists number\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1590747661487_613552488",
      "id": "20200529-102101_551270995",
      "dateCreated": "2020-05-29 10:21:01.487",
      "dateStarted": "2020-06-17 17:27:04.844",
      "dateFinished": "2020-06-17 17:27:04.848",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nval distinctArtistsNumber \u003d userArtistNamesCountDF.select(\"artist\").distinct.count\nprintln(distinctArtistsNumber)",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:27:04.943",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "1554191\ndistinctArtistsNumber: Long \u003d 1554191\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1590747287371_1343407231",
      "id": "20200529-101447_1422946071",
      "dateCreated": "2020-05-29 10:14:47.371",
      "dateStarted": "2020-06-17 17:27:05.019",
      "dateFinished": "2020-06-17 17:27:08.954",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nGet the total amount music listened for each artist and most listened artists.",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:27:09.022",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eGet the total amount music listened for each artist and most listened artists.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1591187513078_516772673",
      "id": "20200603-123153_1820679292",
      "dateCreated": "2020-06-03 12:31:53.078",
      "dateStarted": "2020-06-17 17:27:09.078",
      "dateFinished": "2020-06-17 17:27:09.081",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nval listenedArtistsDF \u003d userArtistNamesCountDF.groupBy(\"name\").sum(\"count\").select($\"name\", $\"sum(count)\" as \"total\")\nlistenedArtistsDF.cache\n\nval mostListenedArtistsDF \u003d listenedArtistsDF.sort(desc(\"total\"))\nmostListenedArtistsDF.show",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:27:09.178",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+--------------------+-------+\n|                name|  total|\n+--------------------+-------+\n|           Radiohead|2502596|\n|         The Beatles|2259825|\n|           Green Day|1931143|\n|           Metallica|1543430|\n|          Pink Floyd|1399665|\n|     Nine Inch Nails|1361977|\n|        Modest Mouse|1328969|\n|         Bright Eyes|1234773|\n|             Nirvana|1203348|\n|                Muse|1148684|\n| Death Cab for Cutie|1117277|\n|Red Hot Chili Pep...|1088701|\n|       Elliott Smith|1080542|\n|           Rammstein|1047119|\n|         Linkin Park|1028921|\n|                  U2|1015494|\n|           Nightwish|1010869|\n|            Coldplay|1001417|\n|    System of a Down| 986483|\n|            Interpol| 979770|\n+--------------------+-------+\nonly showing top 20 rows\n\nlistenedArtistsDF: org.apache.spark.sql.DataFrame \u003d [name: string, total: bigint]\nmostListenedArtistsDF: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] \u003d [name: string, total: bigint]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1590595127492_295793374",
      "id": "20200527-155847_268656697",
      "dateCreated": "2020-05-27 15:58:47.492",
      "dateStarted": "2020-06-17 17:27:09.243",
      "dateFinished": "2020-06-17 17:27:23.989",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nz.show(mostListenedArtistsDF)",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:27:24.055",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "name": "string",
                      "total": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                },
                "multiBarChart": {
                  "rotate": {
                    "degree": "-45"
                  },
                  "xLabelStatus": "default",
                  "stacked": false
                },
                "stackedAreaChart": {
                  "rotate": {
                    "degree": "-45"
                  },
                  "xLabelStatus": "default"
                },
                "lineChart": {
                  "rotate": {
                    "degree": "-45"
                  },
                  "xLabelStatus": "default"
                }
              },
              "commonSetting": {},
              "keys": [
                {
                  "name": "name",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "values": [
                {
                  "name": "total",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ]
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "name\ttotal\nRadiohead\t2502596\nThe Beatles\t2259825\nGreen Day\t1931143\nMetallica\t1543430\nPink Floyd\t1399665\nNine Inch Nails\t1361977\nModest Mouse\t1328969\nBright Eyes\t1234773\nNirvana\t1203348\nMuse\t1148684\nDeath Cab for Cutie\t1117277\nRed Hot Chili Peppers\t1088701\nElliott Smith\t1080542\nRammstein\t1047119\nLinkin Park\t1028921\nU2\t1015494\nNightwish\t1010869\nColdplay\t1001417\nSystem of a Down\t986483\nInterpol\t979770\nWeezer\t977933\nA Perfect Circle\t973730\nThe Smashing Pumpkins\t950683\nLed Zeppelin\t944551\nIncubus\t920733\nBeck\t906699\nThe Cure\t895561\nEminem\t891612\nPixies\t889498\nblink-182\t887007\nThe Postal Service\t885848\nThe Killers\t879764\nTool\t858922\nThe Shins\t846458\nJimmy Eat World\t838323\nMy Chemical Romance\t793719\nIn Flames\t786027\nIron Maiden\t765957\nQueens of the Stone Age\t760121\nR.E.M.\t752743\nQueen\t740877\nFranz Ferdinand\t740594\nDavid Bowie\t722031\nBjörk\t708168\nBelle and Sebastian\t706987\nAir\t689020\nThe Offspring\t682354\nPlacebo\t676059\nThe White Stripes\t671382\nThe Smiths\t670815\nThe Arcade Fire\t669825\nBad Religion\t666645\nKoЯn\t663159\nThe Mars Volta\t660903\nBeastie Boys\t650204\nPearl Jam\t629819\nEvanescence\t626593\nMoby\t622249\nBloc Party\t614742\nJack Johnson\t614735\nBob Dylan\t606271\nOasis\t605582\nMarilyn Manson\t605255\nTori Amos\t603733\nRage Against the Machine\t597351\nDream Theater\t595765\nFoo Fighters\t590075\nDepeche Mode\t585667\nAphex Twin\t571955\nBoards of Canada\t571706\nNOFX\t560297\nThe Decemberists\t559861\nThe Prodigy\t544624\nDashboard Confessional\t535339\nTaking Back Sunday\t534812\nAFI\t526776\nSlipknot\t526622\nGuns N\u0027 Roses\t525885\nBrand New\t506814\nThe Chemical Brothers\t501891\nAlkaline Trio\t501353\nIron \u0026 Wine\t500984\nCake\t497515\nThey Might Be Giants\t497168\nDaft Punk\t496060\nThe Rolling Stones\t492885\nWilco\t491431\nThe Used\t491124\nThe Clash\t489810\nSomething Corporate\t488480\nSublime\t487048\nThe Strokes\t486510\nThe Libertines\t477655\nMaroon 5\t472607\n植松伸夫\t464349\nAC/DC\t463842\nMassive Attack\t459884\nSonata Arctica\t459535\nDave Matthews Band\t457131\nBlur\t450068\nAvril Lavigne\t447088\nMegadeth\t436999\nChildren of Bodom\t432633\nRilo Kiley\t429798\nDeftones\t428818\nJohnny Cash\t428330\n50 Cent\t425818\nGarbage\t423691\nSnow Patrol\t421697\nThe Doors\t418103\nThe Flaming Lips\t415596\nTom Waits\t412769\nAt the Drive-In\t409304\nRamones\t404403\nEels\t399851\nSigur Rós\t399708\nMorrissey\t398493\nOpeth\t396403\n3 Doors Down\t396174\nHiM\t390740\nFall Out Boy\t389757\nJimi Hendrix\t384446\nSum 41\t384176\nOutkast\t379404\nThe Magnetic Fields\t378191\nGorillaz\t376785\nSlayer\t372323\nCounting Crows\t370682\n浜崎あゆみ\t370613\nYellowcard\t366206\nKeane\t365085\nThrice\t364710\nMogwai\t358142\nPavement\t355857\n2Pac\t355221\nThursday\t353443\nThe Faint\t352134\nBen Folds\t351266\nThe Who\t350338\nThe Hives\t348146\n菅野よう子\t343500\nCoheed and Cambria\t342224\nKent\t341506\nJay-Z\t340788\nSimon \u0026 Garfunkel\t339949\nTenacious D\t338125\nDamien Rice\t335079\nNeutral Milk Hotel\t334026\nPortishead\t332766\nBlind Guardian\t331692\nBen Folds Five\t330490\nHot Hot Heat\t330062\nSonic Youth\t326436\nAlice in Chains\t324125\nJoy Division\t323247\nAlanis Morissette\t322949\nNew Order\t322336\nMillencolin\t321727\nWithin Temptation\t320320\nLostprophets\t319959\nNick Drake\t316146\nSufjan Stevens\t315574\nThe Beach Boys\t314187\nGood Charlotte\t313989\nLimp Bizkit\t313761\nThe Blood Brothers\t312682\nNo Doubt\t312466\nLess Than Jake\t311224\nMindless Self Indulgence\t310112\nMisfits\t309837\nPantera\t307386\n311\t306232\nBroken Social Scene\t306054\nThe Streets\t305854\nCursive\t305625\nHoobastank\t304286\nNorah Jones\t302476\nZero 7\t302423\nBlack Sabbath\t301232\nNew Found Glory\t300052\nRancid\t296873\nReel Big Fish\t295462\n...And You Will Know Us by the Trail of Dead\t293959\nPapa Roach\t290971\nThe Velvet Underground\t290072\nSaves the Day\t289459\nThievery Corporation\t288063\nCradle of Filth\t287997\nJeff Buckley\t287971\nApocalyptica\t287776\nBarenaked Ladies\t286466\nJohn Mayer\t286308\nRise Against\t283567\nRyan Adams\t283132\nManic Street Preachers\t280426\nEnya\t277549\nFatboy Slim\t277248\nPJ Harvey\t274109\nBadly Drawn Boy\t273939\nAerosmith\t272992\nFrou Frou\t272246\nAtreyu\t271253\nKanye West\t270496\nBritney Spears\t270454\nPorcupine Tree\t265940\nDJ Shadow\t265742\nFear Factory\t264651\nJudas Priest\t264347\nDir en grey\t263480\nGwen Stefani\t262148\nNeil Young\t261623\nMadonna\t260733\nKillswitch Engage\t260474\nAudioslave\t260409\nFrank Zappa\t258997\nBob Marley\t258667\nDark Tranquillity\t258227\nGuided by Voices\t258033\nYeah Yeah Yeahs\t257221\nMichael Jackson\t256084\nDropkick Murphys\t255779\nKings of Convenience\t255596\nTed Leo and the Pharmacists\t253578\nGoo Goo Dolls\t253474\nThe Ataris\t252961\nNick Cave and the Bad Seeds\t251582\nOf Montreal\t250324\nHoward Shore\t250179\nDisturbed\t250087\nUnderoath\t250027\nRufus Wainwright\t249129\nThe Mountain Goats\t247831\nDie Ärzte\t246929\nFlogging Molly\t245129\nNas\t244969\nThe Cranberries\t244768\nAni DiFranco\t243955\nScissor Sisters\t242937\nSpoon\t241851\nInfected Mushroom\t241346\nDimmu Borgir\t240912\nLacuna Coil\t240258\nEric Clapton\t239861\nAlexisonfire\t239647\nFaith No More\t239596\nDido\t239502\nDoves\t239374\nTravis\t237749\nMae\t237166\nIced Earth\t236278\nthe pillows\t235701\nRJD2\t233687\nGoldfinger\t233324\nBruce Springsteen\t233273\nThe Get Up Kids\t232946\nFiona Apple\t232092\nM83\t231746\nSoilwork\t231395\nThe Futureheads\t229516\nPinback\t228635\nYann Tiersen\t226879\nASIAN KUNG-FU GENERATION\t225048\nSarah McLachlan\t224569\nLe Tigre\t223805\nThird Eye Blind\t222365\nSnoop Dogg\t221982\nThe Cardigans\t221209\nExplosions in the Sky\t220066\nThe Kinks\t218834\nSoundgarden\t218661\nTalking Heads\t217826\nBlack Eyed Peas\t217273\nRobbie Williams\t216710\nCat Power\t216503\nFrank Sinatra\t214695\nBob Marley \u0026 the Wailers\t214608\nPhish\t213096\nYo La Tengo\t212387\nMotion City Soundtrack\t211939\nVNV Nation\t211118\nFinntroll\t209966\nKings of Leon\t209671\nJamiroquai\t208595\nBush\t208473\nCreedence Clearwater Revival\t207101\nFeeder\t206319\nBuilt to Spill\t205647\nLive\t205352\nStone Temple Pilots\t204370\nThe Dandy Warhols\t204324\nMiles Davis\t204193\nRush\t203117\nJay-Z and Linkin Park\t201424\nDire Straits\t201172\nAtmosphere\t201009\nThe Game\t200288\nElvis Presley\t199904\nAgainst Me!\t199678\nThe Starting Line\t199580\nAnti-Flag\t198679\nStaind\t198578\nMates of State\t198278\nAmon Tobin\t198050\nChevelle\t197682\nKylie Minogue\t196714\nUsher\t196357\nSage Francis\t195825\nAutechre\t195664\nDeath From Above 1979\t195571\nFinch\t195302\nKaiser Chiefs\t194672\nOur Lady Peace\t193816\nJet\t193760\nPrefuse 73\t193394\nSenses Fail\t193021\nOrbital\t192999\nMy Bloody Valentine\t192845\nThe Unicorns\t191902\nAyreon\t191337\nBasement Jaxx\t190770\nElton John\t189574\nSwitchfoot\t189543\nStraylight Run\t189470\nMatchbox Twenty\t189114\nSquarepusher\t188901\nDevendra Banhart\t185991\nGuano Apes\t185850\nJohn Frusciante\t185579\nGuster\t185388\nNickelback\t184901\nAnathema\t183760\nPedro the Lion\t183564\n梶浦由記\t183500\nStatic-X\t183458\nFugazi\t183311\nBilly Joel\t182903\nKatatonia\t182750\nThe Police\t182335\nKMFDM\t182195\nFaithless\t181933\nStereophonics\t181277\nPennywise\t180991\nMudvayne\t180804\nThe Roots\t180373\nBloodhound Gang\t179718\nVan Halen\t179216\nThe Crystal Method\t179007\nAsh\t178993\nSimple Plan\t178297\nMe First and the Gimme Gimmes\t178238\nTherion\t177773\n\"Weird Al\" Yankovic\t177741\nCypress Hill\t177177\nElvis Costello\t177130\nKasabian\t176576\nGrandaddy\t176539\nFuneral for a Friend\t175883\nOzzy Osbourne\t175328\nFrom Autumn to Ashes\t175145\nRhapsody\t175068\nConverge\t175055\nBlonde Redhead\t175000\nMirah\t174273\n光田康典\t173340\nKraftwerk\t173148\nThe Fiery Furnaces\t173028\nArch Enemy\t172388\nArmor for Sleep\t171569\nDr. Dre\t171371\nGodsmack\t171047\nJohn Williams\t169904\nLudacris\t169876\nJurassic 5\t169536\nMorcheeba\t168968\nSugarcult\t168884\nStereolab\t167655\nThe Bravery\t167367\nThe Dillinger Escape Plan\t166963\nBon Jovi\t166840\nCopeland\t166397\nJohann Sebastian Bach\t166016\nPulp\t165910\nTegan and Sara\t165894\nStars\t165405\nRazorlight\t165336\nPrimus\t164958\nBreaking Benjamin\t164690\nDeep Purple\t164296\nPrince\t164281\nThe Darkness\t163813\nStratovarius\t163560\nN*E*R*D\t163418\nLow\t163412\nL\u0027Arc~en~Ciel\t163342\nDead Kennedys\t162894\nLifehouse\t162706\nThe Go! Team\t161618\nUnderworld\t161427\nGrateful Dead\t160553\nVelvet Revolver\t159698\nPain of Salvation\t159450\nBrian Eno\t159333\nJoe Satriani\t159069\nThe Weakerthans\t159016\nCKY\t158103\nIdlewild\t157398\nMachine Head\t157046\nSepultura\t155872\nThe Dresden Dolls\t155661\nFour Tet\t155623\n宇多田ヒカル\t155562\nEnigma\t155041\nCreed\t153976\nAesop Rock\t153681\nMetric\t153385\nRob Zombie\t152795\nJethro Tull\t152713\nBowling For Soup\t152606\nScooter\t151995\nStory of the Year\t151680\nLadytron\t151099\nXiu Xiu\t150875\nMotörhead\t149988\nKelly Clarkson\t149718\nPhantom Planet\t149389\nEagles\t149233\nSting\t148989\nAdam Green\t148604\nLeonard Cohen\t148453\nSilverchair\t148373\nQ and Not U\t147691\nJoanna Newsom\t147588\nHelloween\t147343\nGackt\t147029\nSkinny Puppy\t146956\nStevie Wonder\t146910\nDJ Tiësto\t146761\nLamb\t146675\nDelerium\t146661\nA Tribe Called Quest\t146651\nRelient K\t146586\nFleetwood Mac\t146562\nBilly Talent\t146371\nNelly\t146327\nWeen\t146065\nDuran Duran\t144936\nDredg\t144851\nMinus The Bear\t144836\nRöyksopp\t144359\nEverclear\t144268\nLamb of God\t144117\nAimee Mann\t143696\nGenesis\t142717\nThe New Pornographers\t142678\nMachinae Supremacy\t142173\nSparta\t141495\nTurbonegro\t141320\nBen Harper\t140805\nJohn Lennon\t140370\nParadise Lost\t140132\nBen Kweller\t139794\nMadvillain\t139777\nVan Morrison\t139607\nHammerfall\t139574\nThe Presidents of the United States of America\t139249\nHead Automatica\t138520\nSentenced\t138414\nLagwagon\t138149\nWu-Tang Clan\t137843\nWolfgang Amadeus Mozart\t137568\nThe Microphones\t137139\nThe Books\t137069\nPet Shop Boys\t135833\nPaul Oakenfold\t135491\n:Wumpscut:\t135315\nThe Walkmen\t134439\nLCD Soundsystem\t134422\nVarious Artists\t134053\nCannibal Corpse\t133730\n増田俊郎\t133604\nD12\t133345\nmúm\t133265\nManowar\t133169\nLars Winnerbäck\t133082\nAlicia Keys\t132485\nThe Notwist\t131827\nBryan Adams\t131671\nCatch 22\t131106\nAnberlin\t131084\nSaosin\t130892\nLenny Kravitz\t130615\nATB\t130471\nJason Mraz\t130386\nPeter Gabriel\t130354\nBoA\t130120\nType O Negative\t130022\nThe Distillers\t129929\nMos Def\t129863\nJedi Mind Tricks\t129788\nMF Doom\t129304\nAkira Yamaoka\t128745\nSuper Furry Animals\t128236\nDavid Gray\t127073\nIsis\t126464\nThe Verve\t126447\nGoldfrapp\t126432\nLudwig van Beethoven\t125610\nThe Album Leaf\t125331\nTV on the Radio\t124129\nBritish Sea Power\t124095\nGroove Armada\t123693\nMxPx\t123173\nThe Early November\t123079\nCMX\t122971\nMichelle Branch\t122801\nGlassjaw\t122689\nRay Charles\t122678\nChristina Aguilera\t122146\nElectric Six\t122103\nMando Diao\t121823\nMeshuggah\t121590\nAmon Amarth\t121280\n36 Crazyfists\t121208\nFantômas\t121051\nCat Stevens\t120904\nMatchbook Romance\t120531\nManu Chao\t120238\nDe La Soul\t120137\nSocial Distortion\t119878\nDie Toten Hosen\t119440\nDispatch\t119423\nAshlee Simpson\t118933\nDead Can Dance\t118636\nThe Vines\t118074\nP.O.D.\t117979\nM. Ward\t117702\nFurther Seems Forever\t117402\nAvenged Sevenfold\t117280\nHans Zimmer\t117155\nDeath\t117137\nGodspeed You! Black Emperor\t116659\nBlondie\t116427\nAdema\t116402\nEisley\t116360\nRefused\t115974\nThe Corrs\t115697\nThe Beta Band\t115537\nCocteau Twins\t115529\nThe Polyphonic Spree\t115471\nSleater-Kinney\t114781\nPoison the Well\t114727\nPatrick Wolf\t114705\nDizzee Rascal\t114527\nDestiny\u0027s Child\t114469\nPhil Collins\t114126\nMariah Carey\t113633\nThe Stone Roses\t113623\nIll Niño\t113499\nUlver\t113211\nHawthorne Heights\t113131\nMr. Bungle\t113062\nKiss\t112919\nThe Bouncing Souls\t112467\nThe Dismemberment Plan\t112075\nYes\t111728\nNotorious B.I.G.\t111485\nCold\t111440\nFountains of Wayne\t111369\nBiffy Clyro\t111320\nMad Caddies\t111081\nEnnio Morricone\t111049\nThree Days Grace\t110764\nThe Juliana Theory\t110657\nPaul Simon\t110644\nFrom First To Last\t110538\nSymphony X\t110514\nClint Mansell\t110354\nPretty Girls Make Graves\t109853\nNada Surf\t109599\nDescendents\t109509\nThe Haunted\t109255\nSneaker Pimps\t109204\nMastodon\t108903\nNelly Furtado\t108874\nThe Rasmus\t108806\nArchitecture in Helsinki\t108217\nKyuss\t107783\nAs I Lay Dying\t107709\nThe Stills\t107584\nAnimal Collective\t107124\nThe Good Life\t107019\nBeulah\t106983\nAthlete\t106890\nSex Pistols\t106760\nThe Future Sound of London\t106504\nKing Crimson\t106359\nDMX\t106307\nSevendust\t106301\nThe Jesus and Mary Chain\t106256\nAlice Cooper\t106188\nHatebreed\t106143\nBlack Label Society\t106037\nt.A.T.u.\t105891\nEnsiferum\t105891\nSupergrass\t105846\nLou Reed\t105828\nKamelot\t105769\nAnthrax\t105655\nABBA\t105534\nJon Brion\t105304\nMötley Crüe\t105258\nEve 6\t105105\nBöhse Onkelz\t104757\nLes Savy Fav\t104702\nSantana\t103926\nM.I.A.\t103833\nMy Dying Bride\t103760\nKate Bush\t103551\n久石譲\t103468\nViolent Femmes\t103381\nAlien Ant Farm\t103356\nLynyrd Skynyrd\t103302\nStrapping Young Lad\t102904\nPhoenix\t102866\nThe Avalanches\t102855\nThe Sisters of Mercy\t102742\nHooverphonic\t102725\nAndrew Lloyd Webber\t102520\nMinistry\t102023\nThe Zutons\t101757\nVangelis\t101669\nPlaid\t101653\nBrian Wilson\t101518\nMC Chris\t101383\nRichard Cheese\t100814\nTalib Kweli\t100739\nKreator\t100728\nMidtown\t100648\nモーニング娘。\t100637\nJoss Stone\t100538\nThe Appleseed Cast\t100537\nFischerspooner\t100367\nComeback Kid\t100356\nJewel\t100230\nSoundtrack\t100218\nApoptygma Berzerk\t100068\nTheme Songs\t99996\nThe Thrills\t99812\nCalexico\t99394\nScorpions\t99301\nAzure Ray\t98965\nHandsome Boy Modeling School\t98869\nDeerhoof\t98710\nMike Oldfield\t98578\nSmash Mouth\t98125\nElectric Light Orchestra\t97965\nBehemoth\t97914\nOperation Ivy\t97911\nDJ Danger Mouse\t97495\nSongs: Ohia\t97418\nThe Wrens\t97390\nFive Iron Frenzy\t96949\nMew\t96441\nUnwritten Law\t96364\nFrédéric Chopin\t95786\nBT\t95750\nMarvin Gaye\t95693\nDanny Elfman\t95665\nMichael Andrews\t95540\nCollective Soul\t95357\nStrung Out\t95249\nTricky\t95014\nSunny Day Real Estate\t94983\nThe All-American Rejects\t94883\nSheryl Crow\t94649\nSuede\t94570\nBonnie \u0027Prince\u0027 Billy\t94407\nJohn Coltrane\t94251\nFinger Eleven\t93798\nX JAPAN\t93691\nAt The Gates\t93318\n坂本真綾\t93153\nThe Mighty Mighty Bosstones\t92996\n2 Many DJ\u0027s\t92950\nTears for Fears\t92614\nSavage Garden\t92551\nRatatat\t92490\nSoulfly\t92273\nHot Water Music\t92171\nUNKLE\t92107\nMitch Hedberg\t92068\nLemon Jelly\t92053\nVAST\t91966\nThe Gathering\t91942\nVenetian Snares\t91698\nAntony and the Johnsons\t91696\nThe Fall\t91353\nOrgy\t91313\nJawbreaker\t91061\nDevo\t90983\nSay Anything\t90913\nTortoise\t90878\n!!!\t90748\nNatalie Imbruglia\t90739\nEvery Time I Die\t90659\nStreetlight Manifesto\t90636\nBackstreet Boys\t90163\nRoxette\t90147\nKotiteollisuus\t90092\nThe Locust\t90090\nStabbing Westward\t90040\nXzibit\t89877\nNina Simone\t89448\nMoloko\t89245\nXTC\t89240\nThe Academy Is...\t88903\nVanessa Carlton\t88855\nAnnie\t88694\nmewithoutYou\t88642\nJamie Cullum\t88628\nMercury Rev\t88352\nGomez\t88269\nThe Pogues\t88057\n椎名林檎\t88049\nQueensrÿche\t87869\nTocotronic\t87826\nNorma Jean\t87746\nPuddle of Mudd\t87507\nJem\t87174\nDo As Infinity\t87091\nThe Jimi Hendrix Experience\t87084\nThe Vandals\t86950\nDJ Krush\t86704\nThe American Analog Set\t86646\nThe Black Keys\t85959\nLiz Phair\t85905\nJames Brown\t85459\nHowie Day\t85324\nDanzig\t85266\nAmorphis\t85215\nNo Use for a Name\t85165\nSeether\t85138\nEmiliana Torrini\t85133\nMcLusky\t84654\nPaul Van Dyk\t84645\nEdguy\t84610\nImmortal Technique\t84402\nKettcar\t84371\nEmperor\t84357\nJuno Reactor\t84337\nMylo\t84179\nUnearth\t84088\nNasum\t83974\nEinstürzende Neubauten\t83974\nThe Rapture\t83847\nSondre Lerche\t83755\nFuel\t83747\nSiouxsie and the Banshees\t83665\nHilary Duff\t83556\nBlindside\t83414\nPig Destroyer\t83393\nFront Line Assembly\t83036\nBox Car Racer\t82795\nReggie And The Full Effect\t82484\nWir sind Helden\t82405\nK\u0027s Choice\t82326\nPublic Enemy\t82312\nGatsby\u0027s American Dream\t82141\n周杰倫\t82132\nBilly Idol\t81871\nTom Petty and the Heartbreakers\t81419\nCamera Obscura\t81409\nPrimal Scream\t81196\nMoonspell\t80916\nCirca Survive\t80601\nJennifer Lopez\t80581\nJoni Mitchell\t80510\na-ha\t80487\nKelis\t80346\nGang Starr\t80207\nThe Delgados\t80196\nA Silver Mt. Zion\t80043\nThe Donnas\t80034\nP!nk\t80023\nIggy Pop\t79943\nHole\t79938\nThe Von Bondies\t79878\nORANGE RANGE\t79815\nA.C. Newman\t79760\nSoul Coughing\t79345\nHopesfall\t79251\nDef Leppard\t79245\nAmerican Hi-Fi\t79098\nAssemblage 23\t78813\nAcceptance\t78796\nA Static Lullaby\t78557\nEvergrey\t78488\nSteve Vai\t78107\nDrowning Pool\t78097\nSpineShank\t78080\nEmery\t78040\nGavin DeGraw\t77956\nMarillion\t77741\nO-Zone\t77408\nAnastacia\t77140\nThomas Newman\t77108\nInsane Clown Posse\t77017\nGroove Coverage\t76980\nEcho \u0026 the Bunnymen\t76861\nT. Rex\t76777\nGary Jules\t76768\nChicane\t76718\nBlack Rebel Motorcycle Club\t76606\nBeatsteaks\t76480\nKOTOKO\t76445\nBlackalicious\t76158\nJane\u0027s Addiction\t76126\nMalice Mizer\t76119\nMonster Magnet\t75864\nRasputina\t75814\nCovenant\t75731\nRufio\t75676\nThe Music\t75598\nCrowded House\t75593\nPowerman 5000\t75571\nThe Coral\t75551\nCream\t75479\nTracy Chapman\t75354\nSlowdive\t75112\nDinosaur Jr.\t75104\nAnouk\t75096\nThe Aquabats\t75039\nHypocrisy\t74887\nBill Hicks\t74811\nDevin Townsend\t74730\nZZ Top\t74263\nNile\t74243\nDead Poetic\t74209\nImmortal\t74204\nJack Off Jill\t74149\nMatthew Good Band\t74083\nElbow\t74002\nTrapt\t73995\nTiamat\t73946\nMinor Threat\t73794\nTheatre of Tragedy\t73791\nThe Rocket Summer\t73722\nBone Thugs-N-Harmony\t73706\nSoulwax\t73672\nTestament\t73499\nZebrahead\t73388\nChimaira\t73300\nDisney\t73297\nThe (International) Noise Conspiracy\t73279\nポルノグラフィティ\t73121\nBauhaus\t73083\nEverlast\t72980\nRoots Manuva\t72956\nThe Living End\t72949\nBlackmore\u0027s Night\t72865\nSteely Dan\t72865\nJefferson Airplane\t72637\nVertical Horizon\t72636\nSubway to Sally\t72564\nNapalm Death\t72558\nMorbid Angel\t72541\nBillie Holiday\t72354\nBurzum\t72341\nThe Apples In Stereo\t72299\nLil Jon \u0026 The East Side Boyz\t72172\nClinic\t72045\nLali Puna\t72044\nLouis Armstrong\t71936\nAndrew Bird\t71911\nDeltron 3030\t71835\nm-flo\t71723\nTristania\t71698\nWire\t71681\nPropagandhi\t71281\nBathory\t71051\nFront 242\t71022\nBusta Rhymes\t70945\nMadness\t70794\nRX Bandits\t70695\nTom Petty\t70668\nThe Jam\t70644\nBlind Melon\t70621\nFilter\t70603\nMissy Elliott\t70599\nGamma Ray\t70392\nThe Format\t70124\nThe Breeders\t70115\nBuzzcocks\t70009\nHanson\t69947\n(hed) Planet Earth\t69881\nJohn Legend\t69625\nJustin Timberlake\t69564\nDntel\t69532\nPeaches\t69463\nTilly and the Wall\t69332\nDo Make Say Think\t69278\nFeist\t69146\nThe Wallflowers\t69119\nAfter Forever\t69108\nR. Kelly\t68996\nRooney\t68974\nFelix da Housecat\t68933\nThe Cinematic Orchestra\t68748\nBetter Than Ezra\t68663\nCéline Dion\t68476\nLooptroop\t68476\nTsunami Bomb\t68445\nO.A.R.\t68389\nFarin Urlaub\t68331\nBruce Dickinson\t68311\nThe Olivia Tremor Control\t68304\nDeath In Vegas\t68242\nStarsailor\t68238\nCoil\t68188\nElla Fitzgerald\t68003\nAndrew W.K.\t68001\nApulanta\t67981\nMouse on Mars\t67879\nAmbulance LTD\t67729\nCarcass\t67685\nhellogoodbye\t67667\nShadows Fall\t67466\n桜庭統\t67435\nINXS\t67315\nJean-Michel Jarre\t67197\nEmbrace\t67073\nG-Unit\t66908\nNorther\t66757\nPain\t66665\nMonty Python\t66590\nJosh Groban\t66556\nThe Zombies\t66488\nGang Of Four\t66434\nThe Kills\t66302\nThe 69 Eyes\t66043\nAce of Base\t65914\nThe Dust Brothers\t65876\nJets to Brazil\t65820\nBlack Flag\t65787\nJosh Rouse\t65593\nCiara\t65487\nMy Morning Jacket\t65467\nBlue Öyster Cult\t65463\nThe Specials\t65455\nPhilip Glass\t65438\nPete Yorn\t65363\nDogs Die in Hot Cars\t65353\nHidden in Plain View\t65220\nBOYSETSFIRE\t65190\nTrain\t65146\nLauryn Hill\t65007\nYUP\t64919\nFugees\t64853\nFear Before the March of Flames\t64806\nBonobo\t64703\nAl Green\t64679\nMorphine\t64668\nMark Knopfler\t64435\nKlaus Badelt\t64421\nTRUSTcompany\t64272\nSpiritualized\t64268\nPizzicato Five\t64240\nSamael\t64239\nDarkthrone\t64111\nAntonio Vivaldi\t64036\nDio\t64006\nWill Smith\t63959\nRob Dougan\t63954\nMazzy Star\t63942\nSemisonic\t63907\nWIZO\t63846\nMobb Deep\t63692\nNancy Sinatra\t63672\nSeal\t63624\nShakira\t63571\nLoreena McKennitt\t63516\nClutch\t63391\nEnon\t63278\nThe Dears\t63188\nNatasha Bedingfield\t63059\nErasure\t62984\nEverything But the Girl\t62964\nGhostface\t62723\nThe Bled\t62647\nWilliam Shatner\t62463\nBloodbath\t62435\nCommon\t62005\nThe Thermals\t61983\nDragonForce\t61961\nMono\t61861\nHüsker Dü\t61766\nくるり\t61689\nMurder by Death\t61546\nJames Taylor\t61468\nThe Stooges\t61435\n"
          },
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"result-alert alert-warning\" role\u003d\"alert\"\u003e\u003cbutton type\u003d\"button\" class\u003d\"close\" data-dismiss\u003d\"alert\" aria-label\u003d\"Close\"\u003e\u003cspan aria-hidden\u003d\"true\"\u003e\u0026times;\u003c/span\u003e\u003c/button\u003e\u003cstrong\u003eOutput is truncated\u003c/strong\u003e to 1000 rows. Learn more about \u003cstrong\u003ezeppelin.spark.maxResult\u003c/strong\u003e\u003c/div\u003e\n"
          },
          {
            "type": "TEXT",
            "data": ""
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1591184778153_1332693355",
      "id": "20200603-114618_1503339983",
      "dateCreated": "2020-06-03 11:46:18.153",
      "dateStarted": "2020-06-17 17:27:24.116",
      "dateFinished": "2020-06-17 17:27:25.428",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nGet least listened artists.",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:27:25.516",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eGet least listened artists.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1590590069212_-1581829751",
      "id": "20200527-143429_153738922",
      "dateCreated": "2020-05-27 14:34:29.212",
      "dateStarted": "2020-06-17 17:27:25.581",
      "dateFinished": "2020-06-17 17:27:25.584",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nval leastListenedArtistsDF \u003d listenedArtistsDF.sort(\"total\")\nleastListenedArtistsDF.show",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:27:25.680",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+--------------------+-----+\n|                name|total|\n+--------------------+-----+\n|Joe Budden, A Tea...|    1|\n|Rae \u0026 Chritian - ...|    1|\n|Alex Melcher, Peh...|    1|\n|Dolly Parton - Mi...|    1|\n|        Oneiropagida|    1|\n|          Bravissimo|    1|\n|The Middle Spunk ...|    1|\n|The Last Emperor ...|    1|\n|      12 Urban Tribe|    1|\n|3EO35A5QUKMQXL3WV...|    1|\n|         Jon Eberson|    1|\n|gwar - Preskool P...|    1|\n|Ayla-Liebe-Atb Remix|    1|\n|macy gray (bugz i...|    1|\n|Boys to Men \u0026 Cha...|    1|\n|Apani B. Fly Emce...|    1|\n|  Makaveli ft. Storm|    1|\n|       Opération raï|    1|\n|Parle ft jadakiss...|    1|\n|Lil Kim, Mya, Pin...|    1|\n+--------------------+-----+\nonly showing top 20 rows\n\nleastListenedArtistsDF: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] \u003d [name: string, total: bigint]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1590591187326_-770675715",
      "id": "20200527-145307_1643419744",
      "dateCreated": "2020-05-27 14:53:07.326",
      "dateStarted": "2020-06-17 17:27:25.766",
      "dateFinished": "2020-06-17 17:27:26.708",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nThere is not much infos, a lot of artists are at one listen.\nShow how many artist are listened less or equal than 10 times, and the frequence for 1 to ten.",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:27:26.766",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eThere is not much infos, a lot of artists are at one listen.\u003cbr/\u003eShow how many artist are listened less or equal than 10 times, and the frequence for 1 to ten.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1590591212556_783515315",
      "id": "20200527-145332_475861656",
      "dateCreated": "2020-05-27 14:53:32.556",
      "dateStarted": "2020-06-17 17:27:26.826",
      "dateFinished": "2020-06-17 17:27:26.830",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nval lessThanTenTimesListenedArtistsDF \u003d listenedArtistsDF.filter(\"total \u003c\u003d 10\")\nval count \u003d lessThanTenTimesListenedArtistsDF.count\nval ratio \u003d count.toDouble / distinctArtistsNumber.toDouble",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:27:26.926",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "lessThanTenTimesListenedArtistsDF: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] \u003d [name: string, total: bigint]\ncount: Long \u003d 1161120\nratio: Double \u003d 0.7470896434222049\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1590591575297_993223126",
      "id": "20200527-145935_127174988",
      "dateCreated": "2020-05-27 14:59:35.297",
      "dateStarted": "2020-06-17 17:27:26.980",
      "dateFinished": "2020-06-17 17:27:27.993",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nMore than one million are listened less or equal than ten times, it\u0027s about 75% of all artists.\nNow let\u0027s see the distribution :",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:27:28.081",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eMore than one million are listened less or equal than ten times, it\u0026rsquo;s about 75% of all artists.\u003cbr/\u003eNow let\u0026rsquo;s see the distribution :\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1591187115117_-1426829179",
      "id": "20200603-122515_1618842214",
      "dateCreated": "2020-06-03 12:25:15.117",
      "dateStarted": "2020-06-17 17:27:28.153",
      "dateFinished": "2020-06-17 17:27:28.156",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nval freqOneToTenDF \u003d lessThanTenTimesListenedArtistsDF.groupBy(\"total\").count.sort(\"total\")\nfreqOneToTenDF.show\nz.show(freqOneToTenDF)",
      "user": "anonymous",
      "dateUpdated": "2020-06-18 22:18:45.024",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "1": {
            "graph": {
              "mode": "multiBarChart",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "total": "string",
                      "count": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                },
                "multiBarChart": {
                  "rotate": {
                    "degree": "-45"
                  },
                  "xLabelStatus": "default"
                }
              },
              "commonSetting": {},
              "keys": [
                {
                  "name": "total",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "values": [
                {
                  "name": "count",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ]
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+-----+------+\n|total| count|\n+-----+------+\n|    1|494512|\n|    2|220020|\n|    3|127612|\n|    4| 86240|\n|    5| 62579|\n|    6| 48704|\n|    7| 38467|\n|    8| 32332|\n|    9| 27004|\n|   10| 23650|\n+-----+------+\n\n"
          },
          {
            "type": "TABLE",
            "data": "total\tcount\n1\t494512\n2\t220020\n3\t127612\n4\t86240\n5\t62579\n6\t48704\n7\t38467\n8\t32332\n9\t27004\n10\t23650\n"
          },
          {
            "type": "TEXT",
            "data": "freqOneToTenDF: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] \u003d [total: bigint, count: bigint]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1591185436485_-2090136469",
      "id": "20200603-115716_703615281",
      "dateCreated": "2020-06-03 11:57:16.485",
      "dateStarted": "2020-06-17 17:27:28.315",
      "dateFinished": "2020-06-17 17:27:32.961",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nThe most artists are listened only one time.\n\nNow compute mean and median of total count listened artists.",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:27:33.018",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eThe most artists are listened only one time.\u003c/p\u003e\n\u003cp\u003eNow compute mean and median of total count listened artists.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1590750174894_1903396402",
      "id": "20200529-110254_1497574704",
      "dateCreated": "2020-05-29 11:02:54.895",
      "dateStarted": "2020-06-17 17:27:33.102",
      "dateFinished": "2020-06-17 17:27:33.109",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nval mean \u003d listenedArtistsDF.agg(avg(\"total\")).head.getDouble(0)\n\nval median \u003d listenedArtistsDF.stat.approxQuantile(\"total\", Array(0.5), 0.01)(0)",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:27:33.201",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "mean: Double \u003d 238.32715067690853\nmedian: Double \u003d 3.0\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1590749376871_1302947423",
      "id": "20200529-104936_1595594524",
      "dateCreated": "2020-05-29 10:49:36.871",
      "dateStarted": "2020-06-17 17:27:33.266",
      "dateFinished": "2020-06-17 17:27:35.705",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nWe can see that half of the artists were listened to less than three times, which can be considered a discovery or even a mistake. ",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:27:35.767",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eWe can see that half of the artists were listened to less than three times, which can be considered a discovery or even a mistake.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1590762899249_-1376030230",
      "id": "20200529-143459_1353245403",
      "dateCreated": "2020-05-29 14:34:59.250",
      "dateStarted": "2020-06-17 17:27:35.847",
      "dateFinished": "2020-06-17 17:27:35.858",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Around mispelled artists names\n\nLet\u0027s see which artists are the most misspelled. First compute a Map with the correct artist id as key and the list of \"bad\" ids associated as value.",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:27:35.946",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eAround mispelled artists names\u003c/h2\u003e\n\u003cp\u003eLet\u0026rsquo;s see which artists are the most misspelled. First compute a Map with the correct artist id as key and the list of \u0026ldquo;bad\u0026rdquo; ids associated as value.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1591349459271_383008968",
      "id": "20200605-093059_1465513130",
      "dateCreated": "2020-06-05 09:30:59.271",
      "dateStarted": "2020-06-17 17:27:36.010",
      "dateFinished": "2020-06-17 17:27:36.014",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nval aliasToListWrongNames \u003d rawArtistAlias.flatMap { line \u003d\u003e\n    val Array(artist, alias) \u003d line.split(\u0027\\t\u0027)\n    if (artist.isEmpty) None\n    else Some((alias.toInt, artist.toInt))\n}\n.collect\n.groupBy { case (k, v) \u003d\u003e k }\n.map { case (k, v) \u003d\u003e (k, v.map { case (_, v2) \u003d\u003e v2 } ) }",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:27:36.109",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "aliasToListWrongNames: scala.collection.immutable.Map[Int,Array[Int]] \u003d Map(1024902 -\u003e Array(7031865, 10126186, 6779755, 9932604), 1015734 -\u003e Array(6673210, 1136741, 1245178, 2143731, 10329891, 1333615, 1101501), 6717723 -\u003e Array(10057398, 1252688, 6652734, 6701651, 6865044), 1004327 -\u003e Array(6679302, 6664492, 6664471, 6664500, 6823491, 6635742, 6632559, 2169048, 6762318, 6657467, 2131746, 6672038, 1103218, 7021176, 6817192, 1163863), 2163 -\u003e Array(10288454, 1025190, 6632837, 10290466, 1240348), 9945889 -\u003e Array(6781150, 6706888), 1195124 -\u003e Array(6993413), 6610733 -\u003e Array(6610799), 1018501 -\u003e Array(6762855, 2027662, 1025548), 645 -\u003e Array(1161813), 6952452 -\u003e Array(6967331), 1022943 -\u003e Array(1202878), 1236718 -\u003e Array(1014752, 9990287), 6696247 -\u003e Array(1099549, 6628091, 2087079), 69 ..."
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1591349478013_-1221883526",
      "id": "20200605-093118_1002665108",
      "dateCreated": "2020-06-05 09:31:18.013",
      "dateStarted": "2020-06-17 17:27:36.180",
      "dateFinished": "2020-06-17 17:27:37.143",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nval artistsWithMostWrongAlias \u003d aliasToListWrongNames.map { case (k,v) \u003d\u003e (k, v.length) }.toList.toDF(\"artist\", \"count\")\nartistsWithMostWrongAlias.describe(\"count\").show\nartistsWithMostWrongAlias.sort(desc(\"count\")).show\nval ratio \u003d artistsWithMostWrongAlias.count.toDouble / distinctArtistsNumber.toDouble",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:27:37.185",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "artist": "string",
                      "count": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                },
                "multiBarChart": {
                  "rotate": {
                    "degree": "-45"
                  },
                  "xLabelStatus": "default",
                  "stacked": false
                },
                "lineChart": {
                  "rotate": {
                    "degree": "-45"
                  },
                  "xLabelStatus": "default"
                },
                "stackedAreaChart": {
                  "rotate": {
                    "degree": "-45"
                  },
                  "xLabelStatus": "default"
                }
              },
              "commonSetting": {},
              "keys": [
                {
                  "name": "artist",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "values": [
                {
                  "name": "count",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ]
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+-------+------------------+\n|summary|             count|\n+-------+------------------+\n|  count|             22478|\n|   mean| 8.492392561615802|\n| stddev|28.895991802786074|\n|    min|                 1|\n|    max|              1204|\n+-------+------------------+\n\n+-------+-----+\n| artist|count|\n+-------+-----+\n|1000024| 1204|\n|1034635|  955|\n|     82|  671|\n|1003694|  656|\n|   1854|  656|\n|1000113|  629|\n|    930|  628|\n|    979|  620|\n|1000107|  537|\n|    976|  536|\n|   1182|  527|\n|   1205|  451|\n|   1274|  450|\n|   4061|  424|\n|1001646|  424|\n|1000323|  413|\n|2003588|  390|\n|1256375|  385|\n|1247272|  373|\n|1008093|  365|\n+-------+-----+\nonly showing top 20 rows\n\nartistsWithMostWrongAlias: org.apache.spark.sql.DataFrame \u003d [artist: int, count: int]\nratio: Double \u003d 0.014462829858106242\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1591358782492_650459347",
      "id": "20200605-120622_212507654",
      "dateCreated": "2020-06-05 12:06:22.492",
      "dateStarted": "2020-06-17 17:27:37.269",
      "dateFinished": "2020-06-17 17:27:38.675",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nWe can see there is 22\u0027478 artists names (~ 1.5% of total artists number) misspelled and the worst has it 1204 times ! Let\u0027s see who this artist is.",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:27:38.770",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eWe can see there is 22\u0026rsquo;478 artists names (~ 1.5% of total artists number) misspelled and the worst has it 1204 times ! Let\u0026rsquo;s see who this artist is.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1591359950223_1486741864",
      "id": "20200605-122550_1931951013",
      "dateCreated": "2020-06-05 12:25:50.223",
      "dateStarted": "2020-06-17 17:27:38.835",
      "dateFinished": "2020-06-17 17:27:38.847",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nartistByID.select(\"name\").filter(\"id \u003d\u003d 1000024\").show",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:27:38.935",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+---------+\n|     name|\n+---------+\n|Metallica|\n+---------+\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1591360073285_1319920019",
      "id": "20200605-122753_1932124994",
      "dateCreated": "2020-06-05 12:27:53.285",
      "dateStarted": "2020-06-17 17:27:38.997",
      "dateFinished": "2020-06-17 17:27:40.357",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nOh no ! It\u0027s Metallica ! How is that even possible ? Let\u0027s see the 1204 errors.",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:27:40.397",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eOh no ! It\u0026rsquo;s Metallica ! How is that even possible ? Let\u0026rsquo;s see the 1204 errors.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1591360484448_-1576468597",
      "id": "20200605-123444_670068784",
      "dateCreated": "2020-06-05 12:34:44.448",
      "dateStarted": "2020-06-17 17:27:40.484",
      "dateFinished": "2020-06-17 17:27:40.487",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nval aliasIdsToMetallica \u003d aliasToListWrongNames.getOrElse(1000024, Array()).toList.toDF(\"id\")\nval aliasNamesToMetallica \u003d aliasIdsToMetallica.join(artistByID, artistByID(\"id\") \u003d\u003d\u003d aliasIdsToMetallica(\"id\"))\naliasNamesToMetallica.show(false)",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:27:40.584",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+--------+--------+-----------------------------------------------+\n|id      |id      |name                                           |\n+--------+--------+-----------------------------------------------+\n|1240322 |1240322 |Metallica \u0026 The SF Symphony Orchestra          |\n|10113173|10113173|Metallica - B\u0026P - 14                           |\n|10024375|10024375|Metallica - B\u0026P - 21                           |\n|10024376|10024376|Metallica - ...And Justice For All -           |\n|10024488|10024488|Metallica - B\u0026P - 24                           |\n|1136616 |1136616 |30B10001806F00287800.Metallica and The SF      |\n|7004497 |7004497 |Metallica \u0026 San-Francisco-Orchester            |\n|10025794|10025794|Metallica - Live in Belgrade 26.6              |\n|10186355|10186355|Metallica Some Kind of Monster                 |\n|6945944 |6945944 |03. Metallica                                  |\n|1246630 |1246630 |Metallica \u0026 Michael Kamen                      |\n|1138243 |1138243 |Metallica -[Disc 2(10)                         |\n|6946149 |6946149 |Metallica -1987- Garage Days                   |\n|1247944 |1247944 |Metallica 06                                   |\n|6672703 |6672703 |Metallica -1998- Garage Inc,disc I             |\n|9934619 |9934619 |Metallica \u0026 San Fran                           |\n|7031937 |7031937 || METALLICA                                    |\n|6991351 |6991351 |Metallica (w                                   |\n|2038418 |2038418 |METALLICA@Apoptygma Berzerk                   |\n|9918437 |9918437 |Metallica - Live 2004-05-28 - Helsinki, Finland|\n+--------+--------+-----------------------------------------------+\nonly showing top 20 rows\n\naliasIdsToMetallica: org.apache.spark.sql.DataFrame \u003d [id: int]\naliasNamesToMetallica: org.apache.spark.sql.DataFrame \u003d [id: int, id: int ... 1 more field]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1591360540945_-407387076",
      "id": "20200605-123540_921478601",
      "dateCreated": "2020-06-05 12:35:40.945",
      "dateStarted": "2020-06-17 17:27:40.640",
      "dateFinished": "2020-06-17 17:27:41.114",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nBefore run the portion of code above, we think that the name \"Metallica\" was misspelled. However, as we can see, it\u0027s more a name with some details or additions than just bad spelling.",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:27:41.140",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eBefore run the portion of code above, we think that the name \u0026ldquo;Metallica\u0026rdquo; was misspelled. However, as we can see, it\u0026rsquo;s more a name with some details or additions than just bad spelling.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1591361344864_135508832",
      "id": "20200605-124904_747511390",
      "dateCreated": "2020-06-05 12:49:04.864",
      "dateStarted": "2020-06-17 17:27:41.243",
      "dateFinished": "2020-06-17 17:27:41.247",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## More statistics with MusicBrainz data\n\nTo do more stats and get more informations about artists, we get [MusicBrainz](https://musicbrainz.org/) artists data.\nWe have exported `artist`, `artist_type`, `gender`, `artist_tag`, `tag`, `area` and `area_type` tables (visible in [this schema](https://musicbrainz.org/doc/MusicBrainz_Database/Schema#Schema)) in CSV to simplify importation in Zeppelin.\nWe consider tags as genres, from the explications in [this page](https://musicbrainz.org/doc/Genre).",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 20:23:17.728",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eMore statistics with MusicBrainz data\u003c/h2\u003e\n\u003cp\u003eTo do more stats and get more informations about artists, we get \u003ca href\u003d\"https://musicbrainz.org/\"\u003eMusicBrainz\u003c/a\u003e artists data.\u003cbr/\u003eWe have exported \u003ccode\u003eartist\u003c/code\u003e, \u003ccode\u003eartist_type\u003c/code\u003e, \u003ccode\u003egender\u003c/code\u003e, \u003ccode\u003eartist_tag\u003c/code\u003e, \u003ccode\u003etag\u003c/code\u003e, \u003ccode\u003earea\u003c/code\u003e and \u003ccode\u003earea_type\u003c/code\u003e tables (visible in \u003ca href\u003d\"https://musicbrainz.org/doc/MusicBrainz_Database/Schema#Schema\"\u003ethis schema\u003c/a\u003e) in CSV to simplify importation in Zeppelin.\u003cbr/\u003eWe consider tags as genres, from the explications in \u003ca href\u003d\"https://musicbrainz.org/doc/Genre\"\u003ethis page\u003c/a\u003e.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1592058725402_1744366970",
      "id": "20200613-143205_2106088720",
      "dateCreated": "2020-06-13 14:32:05.405",
      "dateStarted": "2020-06-17 20:23:17.729",
      "dateFinished": "2020-06-17 20:23:17.734",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sh\ncd /data\nif [[ ! -d musicbrainz-export ]]\nthen\n    if [[ ! -f musicbrainz-export.tar.xz ]]\n    then \n        echo \"Downloading musicbrainz-export.tar.xz\"\n        curl --silent https://drive.switch.ch/index.php/s/Czx675Yfj0JISTD/download -o musicbrainz-export.tar.xz\n    fi\n    echo \"Extracting to musicbrainz-export\"\n    tar xfv musicbrainz-export.tar.xz\nfi\nls -lhF musicbrainz-export",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:27:41.506",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "sh",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/sh"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "total 233M\n-rw-r--r-- 1 1000 1000  12M Jun 15 14:03 area.csv\n-rw-r--r-- 1 1000 1000 1.5K Jun 15 14:03 area_type.csv\n-rw-r--r-- 1 1000 1000 205M Jun 15 13:59 artist.csv\n-rw-r--r-- 1 1000 1000  15M Jun 16 08:53 artist_tag.csv\n-rw-r--r-- 1 1000 1000  349 Jun 15 14:02 artist_type.csv\n-rw-r--r-- 1 1000 1000  333 Jun 15 14:03 gender.csv\n-rw-r--r-- 1 1000 1000 2.3M Jun 16 08:56 tag.csv\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1592230920343_943315308",
      "id": "20200615-142200_1869894976",
      "dateCreated": "2020-06-15 14:22:00.343",
      "dateStarted": "2020-06-17 17:27:41.572",
      "dateFinished": "2020-06-17 17:27:41.590",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nval mbArtistDF \u003d spark.read.format(\"csv\")\n  .option(\"sep\", \",\")\n  .option(\"inferSchema\", \"true\")\n  .option(\"header\", \"true\")\n  .load(\"/data/musicbrainz-export/artist.csv\").cache\n\nval mbArtistTypeDF \u003d spark.read.format(\"csv\")\n  .option(\"sep\", \",\")\n  .option(\"inferSchema\", \"true\")\n  .option(\"header\", \"true\")\n  .load(\"/data/musicbrainz-export/artist_type.csv\").cache\n\nval mbArtistTagDF \u003d spark.read.format(\"csv\")\n  .option(\"sep\", \",\")\n  .option(\"inferSchema\", \"true\")\n  .option(\"header\", \"true\")\n  .load(\"/data/musicbrainz-export/artist_tag.csv\").cache\n\nval mbGenderDF \u003d spark.read.format(\"csv\")\n  .option(\"sep\", \",\")\n  .option(\"inferSchema\", \"true\")\n  .option(\"header\", \"true\")\n  .load(\"/data/musicbrainz-export/gender.csv\").cache\n\nval mbAreaDF \u003d spark.read.format(\"csv\")\n  .option(\"sep\", \",\")\n  .option(\"inferSchema\", \"true\")\n  .option(\"header\", \"true\")\n  .load(\"/data/musicbrainz-export/area.csv\").cache\n\nval mbAreaTypeDF \u003d spark.read.format(\"csv\")\n  .option(\"sep\", \",\")\n  .option(\"inferSchema\", \"true\")\n  .option(\"header\", \"true\")\n  .load(\"/data/musicbrainz-export/area_type.csv\").cache\n\nval mbTagDF \u003d spark.read.format(\"csv\")\n  .option(\"sep\", \",\")\n  .option(\"inferSchema\", \"true\")\n  .option(\"header\", \"true\")\n  .load(\"/data/musicbrainz-export/tag.csv\").cache",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:27:41.672",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "mbArtistDF: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] \u003d [id: int, gid: string ... 17 more fields]\nmbArtistTypeDF: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] \u003d [id: int, name: string ... 4 more fields]\nmbArtistTagDF: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] \u003d [artist: int, tag: int ... 2 more fields]\nmbGenderDF: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] \u003d [id: int, name: string ... 4 more fields]\nmbAreaDF: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] \u003d [id: int, gid: string ... 12 more fields]\nmbAreaTypeDF: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] \u003d [id: int, name: string ... 4 more fields]\nmbTagDF: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] \u003d [id: int, name: string ... 1 more field]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1592231084258_-1761658128",
      "id": "20200615-142444_80810858",
      "dateCreated": "2020-06-15 14:24:44.258",
      "dateStarted": "2020-06-17 17:27:41.729",
      "dateFinished": "2020-06-17 17:27:48.293",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nLet\u0027s join them all.",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:27:48.335",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eLet\u0026rsquo;s join them all.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1592296384926_1868277000",
      "id": "20200616-083304_1449026664",
      "dateCreated": "2020-06-16 08:33:04.926",
      "dateStarted": "2020-06-17 17:27:48.407",
      "dateFinished": "2020-06-17 17:27:48.410",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\n\nval mbArtistTagCleanDF \u003d mbArtistTagDF.select($\"artist\".alias(\"artist_id\"), $\"tag\".alias(\"tag_id\"))\nval mbTagFullDF \u003d \n    mbTagDF.select($\"id\", $\"name\".alias(\"tag\"))\n    .join(mbArtistTagCleanDF, mbTagDF(\"id\") \u003d\u003d\u003d mbArtistTagCleanDF(\"tag_id\"))\n    .select(\"tag\", \"artist_id\")\n\nval mbAreaCleanDF \u003d mbAreaDF.select($\"id\", $\"name\", $\"type\".alias(\"type_id\"))\nval mbAreaFullDF \u003d \n    mbAreaCleanDF\n    .join(mbAreaTypeDF.select($\"id\", $\"name\".alias(\"type\")), mbAreaCleanDF(\"type_id\") \u003d\u003d\u003d mbAreaTypeDF(\"id\"))\n    .select(mbAreaCleanDF(\"id\"), $\"name\".alias(\"area\"), $\"type\".alias(\"area_type\"))\n\nval mbArtistCleanDF \u003d mbArtistDF.select(\n    $\"id\",\n    $\"name\",\n    $\"begin_date_year\",\n    $\"begin_date_month\",\n    $\"begin_date_day\",\n    $\"end_date_year\",\n    $\"end_date_month\",\n    $\"end_date_day\",\n    $\"type\".alias(\"type_id\"),\n    $\"area\".alias(\"area_id\"),\n    $\"gender\".alias(\"gender_id\"),\n    $\"ended\"\n)\n\nval mbArtistTypeGenderAreaDF \u003d \n    mbArtistCleanDF\n    .join(mbArtistTypeDF.select($\"id\", $\"name\".alias(\"type\")), mbArtistCleanDF(\"type_id\") \u003d\u003d\u003d mbArtistTypeDF(\"id\"))\n    .join(mbGenderDF.select($\"id\", $\"name\".alias(\"gender\")), mbArtistCleanDF(\"gender_id\") \u003d\u003d\u003d mbGenderDF(\"id\"))\n    //.join(mbTagFullDF, mbTagFullDF(\"artist_id\") \u003d\u003d\u003d mbArtistCleanDF(\"id\"))\n    .join(mbAreaFullDF, mbArtistCleanDF(\"area_id\") \u003d\u003d\u003d mbAreaFullDF(\"id\"))\n    .select(mbArtistCleanDF(\"id\"), $\"name\", $\"type\", $\"gender\", $\"area\", $\"area_type\", $\"ended\", $\"begin_date_year\", $\"begin_date_month\", $\"begin_date_day\", $\"end_date_year\", $\"end_date_month\", $\"end_date_day\").cache\n\nmbArtistTypeGenderAreaDF.show\n",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:27:48.507",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+-------+--------------------+------+------+-------------+-----------+-----+---------------+----------------+--------------+-------------+--------------+------------+\n|     id|                name|  type|gender|         area|  area_type|ended|begin_date_year|begin_date_month|begin_date_day|end_date_year|end_date_month|end_date_day|\n+-------+--------------------+------+------+-------------+-----------+-----+---------------+----------------+--------------+-------------+--------------+------------+\n| 811740|    Margaret Hendrie|Person|Female|        Nauru|    Country|    t|           1924|            null|          null|         1990|          null|        null|\n| 529371|       Robin Freeman|Person|  Male|Noord-Brabant|Subdivision|    f|           1952|            null|          null|         null|          null|        null|\n|1187413|       Lord of Sp33d|Person|  Male|Noord-Brabant|Subdivision|    f|           null|            null|          null|         null|          null|        null|\n|1631302|      Thomas Pieters|Person|  Male|Noord-Brabant|Subdivision|    f|           null|            null|          null|         null|          null|        null|\n|1152430|  Michèle van der Aa|Person|Female|Noord-Brabant|Subdivision|    f|           1982|               9|             9|         null|          null|        null|\n|1911349|         Lya de Haas|Person|Female|Noord-Brabant|Subdivision|    f|           1958|              11|             6|         null|          null|        null|\n|1801197|      The Lapin King|Person|  Male|   Norrbotten|Subdivision|    f|           null|            null|          null|         null|          null|        null|\n|1461430|Maria Casandra Hauși|Person|Female|    Maramureș|Subdivision|    f|           null|               3|            11|         null|          null|        null|\n|1602734|       Prince Pronto|Person|  Male| San Fernando|       City|    f|           1997|              12|             7|         null|          null|        null|\n|1074481|       Ernst Stadler|Person|  Male|       Alsace|Subdivision|    t|           1883|               8|            11|         1914|            10|          30|\n|1544877|  Guillaume Schleret|Person|  Male|       Alsace|Subdivision|    f|           null|            null|          null|         null|          null|        null|\n|1544879|      Lionel Bascole|Person|  Male|       Alsace|Subdivision|    f|           null|            null|          null|         null|          null|        null|\n|1544881|    Guillaume Fleith|Person|  Male|       Alsace|Subdivision|    f|           null|            null|          null|         null|          null|        null|\n|1544882|          Fred Drill|Person|  Male|       Alsace|Subdivision|    f|           null|            null|          null|         null|          null|        null|\n|1849072|       Eugène Maegey|Person|  Male|       Alsace|Subdivision|    f|           null|            null|          null|         null|          null|        null|\n|1906578|                  Go|Person|  Male|       Alsace|Subdivision|    f|           null|            null|          null|         null|          null|        null|\n|1118018|    Friederike Brion|Person|Female|       Alsace|Subdivision|    t|           1752|               4|            19|         1813|             4|           3|\n|1427413|Christine le Ross...|Person|Female|       Alsace|Subdivision|    f|           null|            null|          null|         null|          null|        null|\n|1887899|       Léopoldine HH|Person|Female|       Alsace|Subdivision|    f|           null|            null|          null|         null|          null|        null|\n|1219318|        James Taplin|Person|  Male|    Doncaster|Subdivision|    f|           1988|               9|            12|         null|          null|        null|\n+-------+--------------------+------+------+-------------+-----------+-----+---------------+----------------+--------------+-------------+--------------+------------+\nonly showing top 20 rows\n\nmbArtistTagCleanDF: org.apache.spark.sql.DataFrame \u003d [artist_id: int, tag_id: int]\nmbTagFullDF: org.apache.spark.sql.DataFrame \u003d [tag: string, artist_id: int]\nmbAreaCleanDF: org.apache.spark.sql.DataFrame \u003d [id: int, name: string ... 1 more field]\nmbAreaFullDF: org.apache.spark.sql.DataFrame \u003d [id: int, area: string ... 1 more field]\nmbArtistCleanDF: org.apache.spark.sql.DataFrame \u003d [id: int, name: string ... 10 more fields]\nmbArtistTypeGenderAreaDF: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] \u003d [id: int, name: string ... 11 more fields]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1592233639425_135789715",
      "id": "20200615-150719_1934113040",
      "dateCreated": "2020-06-15 15:07:19.425",
      "dateStarted": "2020-06-17 17:27:48.563",
      "dateFinished": "2020-06-17 17:28:12.856",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nLet\u0027s see how much artists we have and their type.",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:28:12.891",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eLet\u0026rsquo;s see how much artists we have and their type.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1592311709373_-1352559509",
      "id": "20200616-124829_1533799060",
      "dateCreated": "2020-06-16 12:48:29.373",
      "dateStarted": "2020-06-17 17:28:13.001",
      "dateFinished": "2020-06-17 17:28:13.004",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\n\nval mbArtistWithTypeDF \u003d \n    mbArtistCleanDF\n    .join(mbArtistTypeDF.select($\"id\", $\"name\".alias(\"type\")), mbArtistCleanDF(\"type_id\") \u003d\u003d\u003d mbArtistTypeDF(\"id\"))\n    .select(\"name\", \"type\")\n    \nprintln(mbArtistCleanDF.count)\nprintln(mbArtistWithTypeDF.count)\n\nval types \u003d mbArtistWithTypeDF.groupBy(\"type\").count\ntypes.show\n",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:28:13.101",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "1660452\n1303657\n+---------+------+\n|     type| count|\n+---------+------+\n|    Group|392098|\n|   Person|889647|\n|Character|  7077|\n|    Other|  2291|\n|    Choir|  5932|\n|Orchestra|  6612|\n+---------+------+\n\nmbArtistWithTypeDF: org.apache.spark.sql.DataFrame \u003d [name: string, type: string]\ntypes: org.apache.spark.sql.DataFrame \u003d [type: string, count: bigint]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1592311699316_-1590723805",
      "id": "20200616-124819_817718112",
      "dateCreated": "2020-06-16 12:48:19.316",
      "dateStarted": "2020-06-17 17:28:13.179",
      "dateFinished": "2020-06-17 17:28:14.717",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nWe can see that we have nearly 1.6 million artists and 1.3 million artists with their types.\nThe main types are \"Group\" and \"Person\", that seems normal.\nLet\u0027s see how much artists are active/inactive.",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:28:14.780",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eWe can see that we have nearly 1.6 million artists and 1.3 million artists with their types.\u003cbr/\u003eThe main types are \u0026ldquo;Group\u0026rdquo; and \u0026ldquo;Person\u0026rdquo;, that seems normal.\u003cbr/\u003eLet\u0026rsquo;s see how much artists are active/inactive.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1592296488321_381288839",
      "id": "20200616-083448_175043875",
      "dateCreated": "2020-06-16 08:34:48.321",
      "dateStarted": "2020-06-17 17:28:14.834",
      "dateFinished": "2020-06-17 17:28:14.837",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nval actives \u003d \n    mbArtistCleanDF\n    .filter($\"ended\" \u003d\u003d\u003d \"f\")\n    .select(\"name\", \"ended\", \"begin_date_year\")\n    .orderBy(\"begin_date_year\")\nval desactives \u003d \n    mbArtistCleanDF\n    .filter($\"ended\" \u003d\u003d\u003d \"t\")\n    .select(\"name\", \"ended\", \"begin_date_year\", \"end_date_year\")\n    .orderBy(\"end_date_year\")\n\nprintln(s\"${actives.count} are active and ${desactives.count} are not\")\nactives.show\ndesactives.show",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:28:14.932",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "1559972 are active and 99488 are not\n+--------------------+-----+---------------+\n|                name|ended|begin_date_year|\n+--------------------+-----+---------------+\n| Thirteen Over Eight|    f|           null|\n|         Dr. I-Bolit|    f|           null|\n|             Astolat|    f|           null|\n|         Pete Moutso|    f|           null|\n|   The Insignificant|    f|           null|\n|        Aric Leavitt|    f|           null|\n|       The Wanderers|    f|           null|\n|           Al Street|    f|           null|\n|     Andrew Greville|    f|           null|\n|          Sintellect|    f|           null|\n|      Project/Object|    f|           null|\n|  Jean-Pierre Martin|    f|           null|\n|          Imagimusic|    f|           null|\n|wecamewithbrokent...|    f|           null|\n|Disappointment In...|    f|           null|\n|          Giant Tomo|    f|           null|\n|Elvin Jones \u0026 Jim...|    f|           null|\n|          Stereobate|    f|           null|\n|          Diskobitch|    f|           null|\n|  Sailing Conductors|    f|           null|\n+--------------------+-----+---------------+\nonly showing top 20 rows\n\n+--------------------+-----+---------------+-------------+\n|                name|ended|begin_date_year|end_date_year|\n+--------------------+-----+---------------+-------------+\n|        The Vaqueros|    t|           null|         null|\n|Biljarten na half...|    t|           1988|         null|\n|    The Acid Gallery|    t|           null|         null|\n|             Warhate|    t|           1996|         null|\n|    Sonny Clark Trio|    t|           null|         null|\n|       Out of Hatred|    t|           null|         null|\n|     The Third Bardo|    t|           1967|         null|\n|               Karna|    t|           1997|         null|\n|               Reign|    t|           1996|         null|\n|   Vijay Deverakonda|    t|           1989|         null|\n|De Zingende Zwervers|    t|           1951|         null|\n|       The Pinafores|    t|           1945|         null|\n|     Swarm of Angels|    t|           null|         null|\n|      Extreme Hatred|    t|           1992|         null|\n|Queen Sarah Saturday|    t|           1990|         null|\n|    Day of the Sword|    t|           null|         null|\n|       Six Feet Deep|    t|           1991|         null|\n|               PanAm|    t|           2000|         null|\n|            On Wings|    t|           1994|         null|\n|        Taiconderoga|    t|           null|         null|\n+--------------------+-----+---------------+-------------+\nonly showing top 20 rows\n\nactives: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] \u003d [name: string, ended: string ... 1 more field]\ndesactives: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] \u003d [name: string, ended: string ... 2 more fields]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1592319041834_1832564271",
      "id": "20200616-145041_2007838676",
      "dateCreated": "2020-06-16 14:50:41.834",
      "dateStarted": "2020-06-17 17:28:14.986",
      "dateFinished": "2020-06-17 17:28:19.121",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nThe major part are active.\nLet\u0027s see artists genders.",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:28:19.189",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eThe major part are active.\u003cbr/\u003eLet\u0026rsquo;s see artists genders.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1592318998480_-1881258764",
      "id": "20200616-144958_170018630",
      "dateCreated": "2020-06-16 14:49:58.480",
      "dateStarted": "2020-06-17 17:28:19.240",
      "dateFinished": "2020-06-17 17:28:19.245",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nval mbArtistWithGenderDF \u003d \n    mbArtistCleanDF\n    .join(mbGenderDF.select($\"id\", $\"name\".alias(\"gender\")), mbArtistCleanDF(\"gender_id\") \u003d\u003d\u003d mbGenderDF(\"id\"))\n    .select(\"name\", \"gender\")\n\nval genders \u003d mbArtistWithGenderDF.groupBy(\"gender\").count\ngenders.show",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:28:19.339",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+--------------+------+\n|        gender| count|\n+--------------+------+\n|        Female|147705|\n|         Other|   813|\n|Not applicable|   435|\n|          Male|529926|\n+--------------+------+\n\nmbArtistWithGenderDF: org.apache.spark.sql.DataFrame \u003d [name: string, gender: string]\ngenders: org.apache.spark.sql.DataFrame \u003d [gender: string, count: bigint]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1592316466274_969640580",
      "id": "20200616-140746_862694107",
      "dateCreated": "2020-06-16 14:07:46.274",
      "dateStarted": "2020-06-17 17:28:19.392",
      "dateFinished": "2020-06-17 17:28:20.315",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nMale artists are far more represented than their female counterparts.\nLet\u0027s take advantage of the joins between all the artist tables to answer the following question: How many English women artists are or have been active since 1986?",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:28:20.392",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eMale artists are far more represented than their female counterparts.\u003cbr/\u003eLet\u0026rsquo;s take advantage of the joins between all the artist tables to answer the following question: How many English women artists are or have been active since 1986?\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1592316953352_-1181104334",
      "id": "20200616-141553_764459238",
      "dateCreated": "2020-06-16 14:15:53.352",
      "dateStarted": "2020-06-17 17:28:20.447",
      "dateFinished": "2020-06-17 17:28:20.451",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nval femaleArtistEnglish \u003d mbArtistTypeGenderAreaDF\n    .filter($\"type\" \u003d\u003d\u003d \"Person\")\n    .filter($\"gender\" \u003d\u003d\u003d \"Female\")\n    .filter($\"area\" \u003d\u003d\u003d \"England\")\n    .filter(\"begin_date_year \u003e\u003d 1986\")\n    .select(\"name\", \"ended\", \"begin_date_year\", \"end_date_year\")\n    .sort(\"begin_date_year\")\n\nprintln(femaleArtistEnglish.count)\nfemaleArtistEnglish.show(30)",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:28:20.546",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "28\n+--------------------+-----+---------------+-------------+\n|                name|ended|begin_date_year|end_date_year|\n+--------------------+-----+---------------+-------------+\n|      Ellie Goulding|    f|           1986|         null|\n|       Jenna Coleman|    f|           1986|         null|\n|         Lowri Dixon|    f|           1987|         null|\n|      Betty Kendrick|    f|           1987|         null|\n|     Jess McAllister|    f|           1987|         null|\n|   Anna Clare Wilson|    f|           1988|         null|\n|          Lily James|    f|           1989|         null|\n|         Emma McGann|    f|           1990|         null|\n|       Jasmine Chloe|    f|           1991|         null|\n|      Ruth Patterson|    f|           1992|         null|\n|          Tek Notice|    f|           1993|         null|\n|                Zyra|    f|           1994|         null|\n|Catherine Ward-Th...|    f|           1994|         null|\n|        Sophie Heard|    f|           1994|         null|\n|          HM Silvers|    f|           1994|         null|\n|Alexandra Catheri...|    f|           1994|         null|\n|   Lizzy Ward Thomas|    f|           1994|         null|\n|        Orla O\u0027Neill|    f|           1996|         null|\n|             Låpsley|    f|           1996|         null|\n|      Megan Lara Mae|    f|           1996|         null|\n|                Maya|    f|           1996|         null|\n|             emellia|    f|           1997|         null|\n|              Ivy HB|    f|           1997|         null|\n|          Florescent|    f|           1998|         null|\n|      Noella Usborne|    f|           1999|         null|\n|          Sarah Kate|    f|           1999|         null|\n|        Erin Bloomer|    f|           2002|         null|\n|     Stephanie Gaunt|    f|           2002|         null|\n+--------------------+-----+---------------+-------------+\n\nfemaleArtistEnglish: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] \u003d [name: string, ended: string ... 2 more fields]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1592317772472_-496031173",
      "id": "20200616-142932_211560802",
      "dateCreated": "2020-06-16 14:29:32.472",
      "dateStarted": "2020-06-17 17:28:20.607",
      "dateFinished": "2020-06-17 17:28:25.929",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nThere is \"only\" 28 English women artists active from 1986. All of them are still active today.",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:28:26.014",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eThere is \u0026ldquo;only\u0026rdquo; 28 English women artists active from 1986. All of them are still active today.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1592318264551_-1587993259",
      "id": "20200616-143744_1414277825",
      "dateCreated": "2020-06-16 14:37:44.552",
      "dateStarted": "2020-06-17 17:28:26.080",
      "dateFinished": "2020-06-17 17:28:26.083",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nval mbArtistWithAreaDF \u003d \n    mbArtistCleanDF\n    .join(mbAreaFullDF, mbArtistCleanDF(\"area_id\") \u003d\u003d\u003d mbAreaFullDF(\"id\"))\n    .select(\"name\", \"area\", \"area_type\")\n\nval areas \u003d mbArtistWithAreaDF.groupBy(\"area\").count.orderBy(desc(\"count\"))\nareas.show",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:28:26.179",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+--------------+------+\n|          area| count|\n+--------------+------+\n| United States|141078|\n|United Kingdom| 58886|\n|         Japan| 52228|\n|       Germany| 51264|\n|        France| 29410|\n|       Belgium| 20292|\n|         Italy| 19744|\n|       Finland| 16634|\n|        Sweden| 16521|\n|        Canada| 15582|\n|         Spain| 14111|\n|     Australia| 12850|\n|   Netherlands| 12542|\n|        Russia|  9410|\n|       Estonia|  7769|\n|        Greece|  7591|\n|       Denmark|  7560|\n|        Poland|  7131|\n|        Brazil|  7009|\n|       Austria|  6993|\n+--------------+------+\nonly showing top 20 rows\n\nmbArtistWithAreaDF: org.apache.spark.sql.DataFrame \u003d [name: string, area: string ... 1 more field]\nareas: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] \u003d [area: string, count: bigint]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1592318817939_689969101",
      "id": "20200616-144657_809091708",
      "dateCreated": "2020-06-16 14:46:57.939",
      "dateStarted": "2020-06-17 17:28:26.233",
      "dateFinished": "2020-06-17 17:28:31.060",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nThe large majority of artists comes from USA.\nLet\u0027s see which inactive artists last longers.",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:28:31.136",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eThe large majority of artists comes from USA.\u003cbr/\u003eLet\u0026rsquo;s see which inactive artists last longers.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1592315680171_458567572",
      "id": "20200616-135440_1806835042",
      "dateCreated": "2020-06-16 13:54:40.171",
      "dateStarted": "2020-06-17 17:28:31.190",
      "dateFinished": "2020-06-17 17:28:31.193",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nimport org.apache.spark.sql.functions._\n\nval longers \u003d \n    mbArtistCleanDF\n    .filter($\"ended\" \u003d\u003d\u003d \"t\")\n    .filter($\"begin_date_year\" !\u003d\u003d \"null\")\n    .filter($\"end_date_year\" !\u003d\u003d \"null\")\n    .select(\"name\", \"begin_date_year\", \"end_date_year\")\n    .withColumn(\"duration\", col(\"end_date_year\") - col(\"begin_date_year\"))\n    .filter($\"end_date_year\" \u003c\u003d 2020)\n    .filter($\"duration\" \u003c 100)\n    .orderBy(desc(\"duration\"))\n\nlongers.show",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:28:31.290",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "warning: there were two deprecation warnings; re-run with -deprecation for details\n+--------------------+---------------+-------------+--------+\n|                name|begin_date_year|end_date_year|duration|\n+--------------------+---------------+-------------+--------+\n|         Gaby Basset|           1902|         2001|    99.0|\n|          Franz Thon|           1910|         2009|    99.0|\n|     Jester Hairston|           1901|         2000|    99.0|\n|     Bernice Petkere|           1901|         2000|    99.0|\n|        Sir Lancelot|           1902|         2001|    99.0|\n|Eduardo Hernández...|           1911|         2010|    99.0|\n|    Manuel Rosenthal|           1904|         2003|    99.0|\n|  Marie-Louise Girod|           1915|         2014|    99.0|\n|      Nimrod Workman|           1895|         1994|    99.0|\n| Mary Elizabeth Frye|           1905|         2004|    99.0|\n|\"Carlos Alberto F...|           1907|         2006|    99.0|\n|  Jonathan Sternberg|           1919|         2018|    99.0|\n|Leopoldo Benedett...|           1815|         1914|    99.0|\n|           Aadu Regi|           1912|         2011|    99.0|\n|   Irena Kwiatkowska|           1912|         2011|    99.0|\n|George Coles Steb...|           1846|         1945|    99.0|\n|      Ola M. Vanberg|           1869|         1968|    99.0|\n|        Eddie Albert|           1906|         2005|    99.0|\n|       Chet Williams|           1918|         2017|    99.0|\n|     Yvonne Verbeeck|           1913|         2012|    99.0|\n+--------------------+---------------+-------------+--------+\nonly showing top 20 rows\n\nimport org.apache.spark.sql.functions._\nlongers: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] \u003d [name: string, begin_date_year: string ... 2 more fields]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1592319748053_716200862",
      "id": "20200616-150228_425139973",
      "dateCreated": "2020-06-16 15:02:28.053",
      "dateStarted": "2020-06-17 17:28:31.354",
      "dateFinished": "2020-06-17 17:28:32.161",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nUnfortunately, we can see that the data in MusicBrainz are not always correct, we can see that the start and end dates of an artist are sometimes confused with their dates of birth and death. So we can\u0027t conclude much about that.\nLet\u0027s see how many tags (genres) we have and group artists by genre.",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:28:32.254",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eUnfortunately, we can see that the data in MusicBrainz are not always correct, we can see that the start and end dates of an artist are sometimes confused with their dates of birth and death. So we can\u0026rsquo;t conclude much about that.\u003cbr/\u003eLet\u0026rsquo;s see how many tags (genres) we have and group artists by genre.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1592319710415_-2034528852",
      "id": "20200616-150150_1895253079",
      "dateCreated": "2020-06-16 15:01:50.416",
      "dateStarted": "2020-06-17 17:28:32.311",
      "dateFinished": "2020-06-17 17:28:32.315",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nval tags \u003d mbTagFullDF.groupBy(\"tag\").count\nprintln(tags.count)",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:28:32.411",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "1": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {
                    "columns": [
                      {
                        "name": "tag",
                        "visible": true,
                        "width": "*",
                        "sort": {},
                        "filters": [
                          {}
                        ],
                        "pinned": ""
                      },
                      {
                        "name": "count",
                        "visible": true,
                        "width": "*",
                        "sort": {},
                        "filters": [
                          {}
                        ],
                        "pinned": ""
                      }
                    ],
                    "scrollFocus": {},
                    "selection": [],
                    "grouping": {
                      "grouping": [],
                      "aggregations": [],
                      "rowExpandedStates": {}
                    },
                    "treeView": {},
                    "pagination": {
                      "paginationCurrentPage": 1.0,
                      "paginationPageSize": 250.0
                    }
                  },
                  "tableColumnTypeState": {
                    "names": {
                      "tag": "string",
                      "count": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                },
                "multiBarChart": {
                  "rotate": {
                    "degree": "-45"
                  },
                  "xLabelStatus": "default"
                }
              },
              "commonSetting": {},
              "keys": [
                {
                  "name": "tag",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "values": [
                {
                  "name": "count",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ]
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "40346\ntags: org.apache.spark.sql.DataFrame \u003d [tag: string, count: bigint]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1592296529500_696877350",
      "id": "20200616-083529_410622344",
      "dateCreated": "2020-06-16 08:35:29.500",
      "dateStarted": "2020-06-17 17:28:32.465",
      "dateFinished": "2020-06-17 17:28:41.187",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nWe can see that we have 40346 different tags. That\u0027s quite a large number, it surely means that a lot of tags don\u0027t really make sense. Let\u0027s see where the median is in order to filter more efficiently.",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:28:41.277",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eWe can see that we have 40346 different tags. That\u0026rsquo;s quite a large number, it surely means that a lot of tags don\u0026rsquo;t really make sense. Let\u0026rsquo;s see where the median is in order to filter more efficiently.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1592308041280_1501376771",
      "id": "20200616-114721_76151233",
      "dateCreated": "2020-06-16 11:47:21.280",
      "dateStarted": "2020-06-17 17:28:41.330",
      "dateFinished": "2020-06-17 17:28:41.334",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nval median \u003d tags.stat.approxQuantile(\"count\", Array(0.5), 0.01)(0)",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:28:41.429",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "median: Double \u003d 1.0\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1592307991007_-1237965898",
      "id": "20200616-114631_1131104150",
      "dateCreated": "2020-06-16 11:46:31.007",
      "dateStarted": "2020-06-17 17:28:41.489",
      "dateFinished": "2020-06-17 17:28:42.744",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nAs we can see, the median is at 1. We can now filter.",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:28:42.787",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eAs we can see, the median is at 1. We can now filter.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1592308136334_-1708265393",
      "id": "20200616-114856_1002433451",
      "dateCreated": "2020-06-16 11:48:56.334",
      "dateStarted": "2020-06-17 17:28:42.862",
      "dateFinished": "2020-06-17 17:28:42.866",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nval tagsFilter \u003d tags.filter(\"count \u003e 1\").orderBy(desc(\"count\"))\nprintln(tagsFilter.count)\ntagsFilter.show\nz.show(tagsFilter.limit(20))\n",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:28:42.962",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "1": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "tag": "string",
                      "count": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                },
                "multiBarChart": {
                  "rotate": {
                    "degree": "-45"
                  },
                  "xLabelStatus": "default"
                }
              },
              "commonSetting": {},
              "keys": [
                {
                  "name": "tag",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "values": [
                {
                  "name": "count",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ]
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "9012\n+----------------+-----+\n|             tag|count|\n+----------------+-----+\n|            jazz|14901|\n|            rock|10413|\n|            punk| 8532|\n|production music| 5901|\n|         hip hop| 5711|\n|       classical| 4605|\n|    likedis auto| 4250|\n|              uk| 4171|\n|        musician| 4128|\n|             usa| 3981|\n|        composer| 3890|\n|             pop| 3873|\n|        american| 3562|\n|      electronic| 3433|\n|            folk| 3181|\n|           metal| 2936|\n|         british| 2753|\n|         latvian| 2366|\n|            soul| 1968|\n|alternative rock| 1809|\n+----------------+-----+\nonly showing top 20 rows\n\n"
          },
          {
            "type": "TABLE",
            "data": "tag\tcount\njazz\t14901\nrock\t10413\npunk\t8532\nproduction music\t5901\nhip hop\t5711\nclassical\t4605\nlikedis auto\t4250\nuk\t4171\nmusician\t4128\nusa\t3981\ncomposer\t3890\npop\t3873\namerican\t3562\nelectronic\t3433\nfolk\t3181\nmetal\t2936\nbritish\t2753\nlatvian\t2366\nsoul\t1968\nalternative rock\t1809\n"
          },
          {
            "type": "TEXT",
            "data": "tagsFilter: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] \u003d [tag: string, count: bigint]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1592306719239_-1205835328",
      "id": "20200616-112519_612958317",
      "dateCreated": "2020-06-16 11:25:19.239",
      "dateStarted": "2020-06-17 17:28:43.013",
      "dateFinished": "2020-06-17 17:28:48.621",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nAs expected it\u0027s a mix of common genres for music, with \"jazz\" at first place.\nLet\u0027s see which artist has the most tags.",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 19:59:21.324",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eAs expected it\u0026rsquo;s a mix of common genres for music, with \u0026ldquo;jazz\u0026rdquo; at first place.\u003cbr/\u003eLet\u0026rsquo;s see which artist has the most tags.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1592311596413_288654536",
      "id": "20200616-124636_1065426378",
      "dateCreated": "2020-06-16 12:46:36.413",
      "dateStarted": "2020-06-17 19:59:21.325",
      "dateFinished": "2020-06-17 19:59:21.333",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nval mbArtistWithTags \u003d \n    mbArtistCleanDF\n    .join(mbTagFullDF, mbTagFullDF(\"artist_id\") \u003d\u003d\u003d mbArtistCleanDF(\"id\"))\n    .select(\"name\", \"tag\")\n//mbArtistWithTags.show\n\nmbArtistWithTags.groupBy(\"name\").count.sort(desc(\"count\")).show\n",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 19:59:01.388",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+--------------------+-----+\n|                name|count|\n+--------------------+-----+\n|         SSHäuptling|  360|\n|              Yabamm|  360|\n|       Sadgda Jamama|  360|\n|                Ekho|  269|\n|     Various Artists|  266|\n|         Suellen Luz|  249|\n|       Gabriele Tosi|  215|\n|            Virginia|  171|\n|      Michael Samson|  136|\n|        SoUnD WaVeS-|  123|\n|          Simon Daum|  117|\n|          Jay Random|  114|\n|               Roiel|  102|\n|Michael Ash Sharb...|   95|\n|               milan|   94|\n|         Picaporters|   93|\n|Jamie and the Fir...|   93|\n|      digitalTRAFFIC|   91|\n|     The Indelicates|   88|\n|                SB19|   83|\n+--------------------+-----+\nonly showing top 20 rows\n\nmbArtistWithTags: org.apache.spark.sql.DataFrame \u003d [name: string, tag: string]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1592311673658_-761641317",
      "id": "20200616-124753_1386603612",
      "dateCreated": "2020-06-16 12:47:53.658",
      "dateStarted": "2020-06-17 19:59:01.449",
      "dateFinished": "2020-06-17 19:59:17.214",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nLet\u0027s see what happend if we join \"original\" artists data with artists data from MusicBrainz.",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 20:10:05.379",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eLet\u0026rsquo;s see what happend if we join \u0026ldquo;original\u0026rdquo; artists data with artists data from MusicBrainz.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1592424463558_1770451654",
      "id": "20200617-200743_351487093",
      "dateCreated": "2020-06-17 20:07:43.558",
      "dateStarted": "2020-06-17 20:10:05.379",
      "dateFinished": "2020-06-17 20:10:05.387",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nval originArtistsDF \u003d userArtistNamesCountDF.select(\"name\").distinct\nval joinOriginMbDF \u003d originArtistsDF.join(mbArtistCleanDF, originArtistsDF(\"name\") \u003d\u003d\u003d mbArtistCleanDF(\"name\"))\njoinOriginMbDF.count",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 20:04:45.926",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "originArtistsDF: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] \u003d [name: string]\njoinOriginMbDF: org.apache.spark.sql.DataFrame \u003d [name: string, id: int ... 11 more fields]\nres37: Long \u003d 317114\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1592424040400_-259133826",
      "id": "20200617-200040_1234751176",
      "dateCreated": "2020-06-17 20:00:40.400",
      "dateStarted": "2020-06-17 20:04:45.986",
      "dateFinished": "2020-06-17 20:05:13.340",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nWe can see that there is only 317\u0027114 artists from both datasets, it\u0027s less than expected.\nFor this reason, we do not try to merge users from \"original\" data with artists from MusicBrainz.",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 20:10:14.373",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eWe can see that there is only 317\u0026rsquo;114 artists from both datasets, it\u0026rsquo;s less than expected.\u003cbr/\u003eFor this reason, we do not try to merge users from \u0026ldquo;original\u0026rdquo; data with artists from MusicBrainz.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1592424514522_191751611",
      "id": "20200617-200834_1297984340",
      "dateCreated": "2020-06-17 20:08:34.522",
      "dateStarted": "2020-06-17 20:10:14.373",
      "dateFinished": "2020-06-17 20:10:14.378",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n# A look with GraphX\n\nNow, we put original data in a graph with [GraphX](https://spark.apache.org/docs/latest/graphx-programming-guide.html).\nOur nodes will be the users and the artists and edges the relation listens count between user and artist.\nBecause users id and artists id can be equal, we need to generate a unique id for each nodes, call it VertexId.\nFrom `userArtistNamesCountDF`, we can extract two RDDs, `users` and `artists`, and zip it with the unique id (an \"auto increment\" id).",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 20:10:52.631",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eA look with GraphX\u003c/h1\u003e\n\u003cp\u003eNow, we put original data in a graph with \u003ca href\u003d\"https://spark.apache.org/docs/latest/graphx-programming-guide.html\"\u003eGraphX\u003c/a\u003e.\u003cbr/\u003eOur nodes will be the users and the artists and edges the relation listens count between user and artist.\u003cbr/\u003eBecause users id and artists id can be equal, we need to generate a unique id for each nodes, call it VertexId.\u003cbr/\u003eFrom \u003ccode\u003euserArtistNamesCountDF\u003c/code\u003e, we can extract two RDDs, \u003ccode\u003eusers\u003c/code\u003e and \u003ccode\u003eartists\u003c/code\u003e, and zip it with the unique id (an \u0026ldquo;auto increment\u0026rdquo; id).\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1591360613704_931012254",
      "id": "20200605-123653_1092685122",
      "dateCreated": "2020-06-05 12:36:53.704",
      "dateStarted": "2020-06-17 20:10:52.632",
      "dateFinished": "2020-06-17 20:10:52.637",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:28:49.062",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1592234940818_-1057498853",
      "id": "20200615-152900_846075695",
      "dateCreated": "2020-06-15 15:29:00.818",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\n\nimport org.apache.spark.graphx._\nimport org.apache.spark.rdd._\n\nval subDF \u003d userArtistNamesCountDF.limit(1000000)\n\nval users \u003d subDF\n    .select(\"user\") // select only users\n    .distinct // remove duplicates\n    .rdd // convert to rdd (for graph creation needs)\n    .map(_.getInt(0)) // convert it to a list of INTs\n    .zipWithIndex // add the \"auto increment\" unique id, or VertexId\n    .map(_.swap) // swap the tuple, because the graph need a RDD[(VertexId, T)]\n    \nval lastUserId \u003d users.count\n\nval artists \u003d subDF\n    .select(\"artist\") // select only artists\n    .distinct // remove duplicates\n    .rdd // convert to rdd (for graph creation needs)\n    .map(_.getInt(0)) // convert it to a list of INTs\n    .zipWithIndex // add the \"auto increment\" unique id, or VertexId\n    .map(_.swap) // swap the tuple, because the graph need a RDD[(VertexId, T)]\n    .map { case (vertexId, id) \u003d\u003e (vertexId + lastUserId, id) } // to maintain unique VertexId, add users.count to each artist VertexId\n\nusers.cache\nartists.cache\n\nval nodes: RDD[(VertexId, Int)] \u003d users.union(artists)\n//nodes.collect.foreach(println)\n//val nodesDF \u003d nodes.toDF(\"vertexId\", \"id\")\n//nodesDF.show\n\nval edges: RDD[Edge[Int]] \u003d subDF.map { line \u003d\u003e\n    val userId \u003d line.getInt(0)\n    val artistId \u003d line.getInt(1)\n    val userVertexId \u003d users.filter{ case (vertexId, id) \u003d\u003e id \u003d\u003d userId }.first._1\n    val artistVertexId \u003d artists.filter{ case (vertexId, id) \u003d\u003e id \u003d\u003d artistId }.first._1\n    val count \u003d line.getInt(2)\n    Edge(userVertexId, artistVertexId, count)\n}.rdd\n\nval graph \u003d Graph(nodes, edges)\ngraph.cache\n",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:28:49.118",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 219.067,
              "optionOpen": false
            }
          }
        },
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "import org.apache.spark.graphx._\nimport org.apache.spark.rdd._\nsubDF: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] \u003d [user: int, artist: int ... 2 more fields]\nusers: org.apache.spark.rdd.RDD[(Long, Int)] \u003d MapPartitionsRDD[510] at map at \u003cconsole\u003e:63\nlastUserId: Long \u003d 122976\nartists: org.apache.spark.rdd.RDD[(Long, Int)] \u003d MapPartitionsRDD[521] at map at \u003cconsole\u003e:74\nnodes: org.apache.spark.rdd.RDD[(org.apache.spark.graphx.VertexId, Int)] \u003d UnionRDD[522] at union at \u003cconsole\u003e:79\nedges: org.apache.spark.rdd.RDD[org.apache.spark.graphx.Edge[Int]] \u003d MapPartitionsRDD[530] at rdd at \u003cconsole\u003e:91\ngraph: org.apache.spark.graphx.Graph[Int,Int] \u003d org.apache.spark.graphx.impl.GraphImpl@3c527754\nres26: org.apache.spark.graphx.Graph[Int,Int] \u003d org.apache.spark.graphx.impl.GraphImpl@3c52..."
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1591963450776_-167988045",
      "id": "20200612-120410_1277165834",
      "dateCreated": "2020-06-12 12:04:10.776",
      "dateStarted": "2020-06-17 17:28:49.173",
      "dateFinished": "2020-06-17 17:28:55.730",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Clustering with K-means",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:19:14.175",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eClustering with K-means\u003c/h2\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1591360616479_-1593573708",
      "id": "20200605-123656_22045573",
      "dateCreated": "2020-06-05 12:36:56.479",
      "dateStarted": "2020-06-17 17:19:14.247",
      "dateFinished": "2020-06-17 17:19:14.250",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nimport org.apache.spark.ml.clustering.KMeans\nimport org.apache.spark.ml.feature.VectorAssembler\nimport org.apache.spark.sql.types.DoubleType\nimport org.apache.spark.sql.types.IntegerType\n\n\nval dataSet \u003d mbArtistCleanDF.filter($\"begin_date_year\" rlike \"^[0-9]*$\") // Regex to filter digits only\n\n\nval setsArray \u003d dataSet.randomSplit(Array(0.9, 0.1))\nval trainDataSet \u003d setsArray(0).withColumn(\"begin_date_year\", col(\"begin_date_year\").cast(IntegerType))\nval testDataSet \u003d setsArray(1).withColumn(\"begin_date_year\", col(\"begin_date_year\").cast(IntegerType))\n\n// trainDataSet.printSchema\n// trainDataSet.show(100)\n\n\n// transform datasetDf with VectorAssembler to add feature column\nval cols \u003d Array(\"begin_date_year\")\nval assembler \u003d new VectorAssembler().setInputCols(cols).setOutputCol(\"features\")\nval featureDfTrain \u003d assembler.transform(trainDataSet)\nval featureDfTest \u003d assembler.transform(testDataSet)\n\n// featureDf.show(10)\n\n// kmeans model with 8 clusters\nval kmeans \u003d new KMeans()\n  .setK(8)\n  .setFeaturesCol(\"features\")\n  .setPredictionCol(\"prediction\")\nval kmeansModel \u003d kmeans.fit(featureDfTrain)\nkmeansModel.clusterCenters.foreach(println)\n\n// test the model with test data set\nval predictDf \u003d kmeansModel.transform(featureDfTest)\npredictDf.show(10)\n\n// no of categories\npredictDf.groupBy(\"prediction\").count().show()\n",
      "user": "anonymous",
      "dateUpdated": "2020-06-18 22:20:18.628",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "java.lang.InterruptedException: sleep interrupted"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1591360616708_-1595920036",
      "id": "20200605-123656_1067093774",
      "dateCreated": "2020-06-05 12:36:56.708",
      "dateStarted": "2020-06-17 17:19:14.408",
      "dateFinished": "2020-06-16 10:37:57.464",
      "status": "ERROR",
      "errorMessage": "java.lang.InterruptedException: sleep interrupted\n\tat java.lang.Thread.sleep(Native Method)\n\tat org.apache.zeppelin.notebook.Paragraph.execute(Paragraph.java:360)\n\tat org.apache.zeppelin.notebook.Note.run(Note.java:683)\n\tat org.apache.zeppelin.socket.NotebookServer.persistAndExecuteSingleParagraph(NotebookServer.java:1881)\n\tat org.apache.zeppelin.socket.NotebookServer.runAllParagraphs(NotebookServer.java:1745)\n\tat org.apache.zeppelin.socket.NotebookServer.onMessage(NotebookServer.java:268)\n\tat org.apache.zeppelin.socket.NotebookSocket.onWebSocketText(NotebookSocket.java:59)\n\tat org.eclipse.jetty.websocket.common.events.JettyListenerEventDriver.onTextMessage(JettyListenerEventDriver.java:189)\n\tat org.eclipse.jetty.websocket.common.message.SimpleTextMessage.messageComplete(SimpleTextMessage.java:69)\n\tat org.eclipse.jetty.websocket.common.events.AbstractEventDriver.appendMessage(AbstractEventDriver.java:66)\n\tat org.eclipse.jetty.websocket.common.events.JettyListenerEventDriver.onTextFrame(JettyListenerEventDriver.java:158)\n\tat org.eclipse.jetty.websocket.common.events.AbstractEventDriver.incomingFrame(AbstractEventDriver.java:162)\n\tat org.eclipse.jetty.websocket.common.WebSocketSession.incomingFrame(WebSocketSession.java:459)\n\tat org.eclipse.jetty.websocket.common.extensions.AbstractExtension.nextIncomingFrame(AbstractExtension.java:182)\n\tat org.eclipse.jetty.websocket.common.extensions.compress.PerMessageDeflateExtension.nextIncomingFrame(PerMessageDeflateExtension.java:105)\n\tat org.eclipse.jetty.websocket.common.extensions.compress.CompressExtension.forwardIncoming(CompressExtension.java:142)\n\tat org.eclipse.jetty.websocket.common.extensions.compress.PerMessageDeflateExtension.incomingFrame(PerMessageDeflateExtension.java:85)\n\tat org.eclipse.jetty.websocket.common.extensions.ExtensionStack.incomingFrame(ExtensionStack.java:220)\n\tat org.eclipse.jetty.websocket.common.Parser.notifyFrame(Parser.java:219)\n\tat org.eclipse.jetty.websocket.common.Parser.parse(Parser.java:244)\n\tat org.eclipse.jetty.websocket.common.io.AbstractWebSocketConnection.readParse(AbstractWebSocketConnection.java:559)\n\tat org.eclipse.jetty.websocket.common.io.AbstractWebSocketConnection.onFillable(AbstractWebSocketConnection.java:390)\n\tat org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:305)\n\tat org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:103)\n\tat org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:118)\n\tat org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)\n\tat org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)\n\tat org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)\n\tat org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)\n\tat org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:765)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:683)\n\tat java.lang.Thread.run(Thread.java:748)\n",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Clustering with Gaussian Mixture Model (GMM)",
      "user": "anonymous",
      "dateUpdated": "2020-06-15 18:41:03.934",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eClustering with Gaussian Mixture Model (GMM)\u003c/h2\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1591360614004_217257177",
      "id": "20200605-123654_995248947",
      "dateCreated": "2020-06-05 12:36:54.004",
      "dateStarted": "2020-06-15 18:41:03.934",
      "dateFinished": "2020-06-15 18:41:03.937",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nimport org.apache.spark.ml.clustering.GaussianMixture\nimport org.apache.spark.ml.feature.VectorAssembler\n\nval dataSet \u003d mbArtistCleanDF.filter($\"begin_date_year\" rlike \"^[0-9]*$\") // Regex to filter digits only\n\n\nval setsArray \u003d dataSet.randomSplit(Array(0.9, 0.1))\nval trainDataSet \u003d setsArray(0).withColumn(\"begin_date_year\", col(\"begin_date_year\").cast(IntegerType))\nval testDataSet \u003d setsArray(1).withColumn(\"begin_date_year\", col(\"begin_date_year\").cast(IntegerType))\n\n// trainDataSet.printSchema\n// trainDataSet.show(100)\n\n\n// transform datasetDf with VectorAssembler to add feature column\nval cols \u003d Array(\"begin_date_year\")\nval assembler \u003d new VectorAssembler().setInputCols(cols).setOutputCol(\"features\")\nval featureDfTrain \u003d assembler.transform(trainDataSet)\nval featureDfTest \u003d assembler.transform(testDataSet)\n\n\n// Trains Gaussian Mixture Model\nval gmm \u003d new GaussianMixture()\n  .setK(5)\nval model \u003d gmm.fit(featureDfTrain)\n\nval predictDf \u003d model.transform(featureDfTest)\n\n// output parameters of mixture model model\nfor (i \u003c- 0 until model.getK) {\n  println(s\"Gaussian $i:\\nweight\u003d${model.weights(i)}\\n\" +\n      s\"mu\u003d${model.gaussians(i).mean}\\nsigma\u003d\\n${model.gaussians(i).cov}\\n\")\n}",
      "user": "anonymous",
      "dateUpdated": "2020-06-18 22:21:07.805",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u003cconsole\u003e:68: error: not found: type VectorAssembler\n       val assembler \u003d new VectorAssembler().setInputCols(cols).setOutputCol(\"features\")\n                           ^\n\u003cconsole\u003e:77: error: type mismatch;\n found   : List[Nothing]\n required: org.apache.spark.sql.Dataset[_]\n       val predictDf \u003d model.transform(testData)\n                                       ^\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1592246465165_12398519",
      "id": "20200615-184105_1703327789",
      "dateCreated": "2020-06-15 18:41:05.165",
      "dateStarted": "2020-06-15 18:41:16.249",
      "dateFinished": "2020-06-15 18:41:16.350",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Building a First Model",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:28:55.861",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eBuilding a First Model\u003c/h2\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1590404072119_591799774",
      "id": "20200525-105432_1663212423",
      "dateCreated": "2020-05-25 10:54:32.119",
      "dateStarted": "2020-06-17 17:28:55.861",
      "dateFinished": "2020-06-17 17:28:55.864",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nimport org.apache.spark.ml.recommendation._\nimport scala.util.Random\n\nval model \u003d new ALS().\n    setSeed(Random.nextLong()).\n    setImplicitPrefs(true).\n    setRank(10).\n    setRegParam(0.01).\n    setAlpha(1.0).\n    setMaxIter(5).\n    setUserCol(\"user\").\n    setItemCol(\"artist\").\n    setRatingCol(\"count\").\n    setPredictionCol(\"prediction\").\n    fit(trainData)",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:28:55.999",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "import org.apache.spark.ml.recommendation._\nimport scala.util.Random\nmodel: org.apache.spark.ml.recommendation.ALSModel \u003d als_4b32218a30b9\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1590405875128_638740172",
      "id": "20200525-112435_1359988035",
      "dateCreated": "2020-05-25 11:24:35.128",
      "dateStarted": "2020-06-17 17:28:56.071",
      "dateFinished": "2020-06-17 17:32:33.035",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nmodel.userFactors.show(1, truncate \u003d false)",
      "user": "anonymous",
      "dateUpdated": "2020-06-15 08:13:21.914",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+---+------------------------------------------------------------------------------------------------------------------------------+\n|id |features                                                                                                                      |\n+---+------------------------------------------------------------------------------------------------------------------------------+\n|90 |[-0.024483252, -0.5611283, 0.89746916, -0.9148582, -0.3860571, -0.05776278, -0.5234345, -0.3919565, -0.48920786, -0.017184306]|\n+---+------------------------------------------------------------------------------------------------------------------------------+\nonly showing top 1 row\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1590406015054_509388477",
      "id": "20200525-112655_1737810644",
      "dateCreated": "2020-05-25 11:26:55.054",
      "dateStarted": "2020-06-15 08:13:21.962",
      "dateFinished": "2020-06-15 08:13:22.272",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Spot Checking Recommendations",
      "user": "anonymous",
      "dateUpdated": "2020-06-15 08:13:22.362",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eSpot Checking Recommendations\u003c/h2\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1590414421056_1572219800",
      "id": "20200525-134701_1337255895",
      "dateCreated": "2020-05-25 13:47:01.056",
      "dateStarted": "2020-06-15 08:13:22.406",
      "dateFinished": "2020-06-15 08:13:22.409",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nval userID \u003d 1059637\nval existingArtistIDs \u003d trainData.filter($\"user\" \u003d\u003d\u003d userID).select(\"artist\").as[Int].collect()\nartistByID.filter($\"id\" isin (existingArtistIDs:_*)).show()",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:28:56.071",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+-------+--------------------+\n|     id|                name|\n+-------+--------------------+\n|1002584|                Nena|\n|1247913|       JamisonParker|\n|1257062|    The Spill Canvas|\n|1257410|tomandandy (ft. K...|\n|1260489|        The Exciters|\n|1260572|    Nightmare Of You|\n|1261496|              J-Kwon|\n|6992072|               angle|\n|   5496| Echo \u0026 the Bunnymen|\n|1150039|        Letter Kills|\n|1283493|            An Angle|\n|1006354|      Pedro the Lion|\n|1085052|             Cordero|\n|     78|             Sublime|\n|1233389|The American Anal...|\n|1234850|         The Hollies|\n|1009156|                 Mae|\n|1003853|        Les Savy Fav|\n|1044920|   Matchbook Romance|\n|   5659|             Midtown|\n+-------+--------------------+\nonly showing top 20 rows\n\nuserID: Int \u003d 1059637\nexistingArtistIDs: Array[Int] \u003d Array(1000010, 1000049, 1000056, 1000062, 1000094, 1000112, 1000113, 1000114, 1000123, 1000130, 1000139, 1000241, 1000263, 1000289, 1000305, 1000320, 1000340, 1000427, 1000428, 1000433, 1000445, 1000527, 1000617, 1000632, 1000676, 1000790, 1000877, 1000890, 1000926, 1000999, 1001007, 1001027, 1001066, 1001068, 1001107, 1001117, 1001130, 1001198, 1001233, 1001249, 1001412, 1001439, 1001482, 1001487, 1001523, 1001530, 1001779, 1001809, 1001828, 1001894, 1002128, 1002204, 1002216, 1002223, 1002225, 1002269, 1002289, 1002326, 1002560, 1002584, 1002723, 1002734, 1002742, 1002850, 1002912, 1003159, 1003176, 1003241, 1003250, 1003568, 1003673, 1003681, 1003689, 1003727, 1003794, 1003853, 1003928, 1004201, 1004226, 1004274, 1004278, 1004294,..."
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1590414312973_773327109",
      "id": "20200525-134512_2071793608",
      "dateCreated": "2020-05-25 13:45:12.973",
      "dateStarted": "2020-06-17 17:28:56.231",
      "dateFinished": "2020-06-17 17:32:34.866",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\ndef makeRecommendations(model: ALSModel, userID: Int, howMany: Int): DataFrame \u003d {\n    val toRecommend \u003d model.itemFactors.select($\"id\".as(\"artist\")).withColumn(\"user\", lit(userID))\n    model.transform(toRecommend).select(\"artist\", \"prediction\").orderBy($\"prediction\".desc).limit(howMany)\n}\n\nval topRecommendations \u003d makeRecommendations(model, userID, 5)\ntopRecommendations.show()",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:28:56.147",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+-------+----------+\n| artist|prediction|\n+-------+----------+\n|1022288| 1.2619828|\n|1045916| 1.2422141|\n|1000388| 1.1622376|\n|1240051| 1.1542941|\n|1233244| 1.1490035|\n+-------+----------+\n\nmakeRecommendations: (model: org.apache.spark.ml.recommendation.ALSModel, userID: Int, howMany: Int)org.apache.spark.sql.DataFrame\ntopRecommendations: org.apache.spark.sql.DataFrame \u003d [artist: int, prediction: float]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1590414339594_-358168064",
      "id": "20200525-134539_310376515",
      "dateCreated": "2020-05-25 13:45:39.594",
      "dateStarted": "2020-06-17 17:32:33.128",
      "dateFinished": "2020-06-17 17:32:46.016",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nval recommendedArtistIDs \u003d topRecommendations.select(\"artist\").as[Int].collect()\nartistByID.filter($\"id\" isin (recommendedArtistIDs:_*)).show()",
      "user": "anonymous",
      "dateUpdated": "2020-06-17 17:28:56.225",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+-------+-----------------+\n|     id|             name|\n+-------+-----------------+\n|1233244|The Rocket Summer|\n|1045916|    Mitch Hedberg|\n|1000388|        Ben Folds|\n|1022288|        Dane Cook|\n|1240051|       The Format|\n+-------+-----------------+\n\nrecommendedArtistIDs: Array[Int] \u003d Array(1022288, 1045916, 1000388, 1240051, 1233244)\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1590414893842_841620200",
      "id": "20200525-135453_1946076405",
      "dateCreated": "2020-05-25 13:54:53.842",
      "dateStarted": "2020-06-17 17:32:35.451",
      "dateFinished": "2020-06-17 17:32:55.908",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\n",
      "user": "anonymous",
      "dateUpdated": "2020-06-15 08:13:44.658",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {}
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1590763718180_1128694673",
      "id": "20200529-144838_813037848",
      "dateCreated": "2020-05-29 14:48:38.180",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "music-recommendator",
  "id": "2F8JB848Y",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {
    "md:shared_process": [],
    "sh:shared_process": [],
    "spark:shared_process": []
  },
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}